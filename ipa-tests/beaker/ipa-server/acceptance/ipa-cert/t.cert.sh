#!/bin/bash
# By  : Automatic Generated by at.3.testcase.pl
# Date: Thu Feb 10 10:50:57 2011

# import local lib file
. ./lib.ipacert.sh


ipacert()
{
    cert_remove_hold
    cert_request
    cert_revoke
    cert_show
    cert_status
} #cert

#############################################
#  test suite: cert-remove-hold (1 test cases)
#############################################
cert_remove_hold()
{
    cert_remove_hold_envsetup
    cert_remove_hold_1001  #test_scenario (positive test): [--cert_id]
    cert_remove_hold_envcleanup
} #cert-remove-hold

cert_remove_hold_envsetup()
{
    rlPhaseStartSetup "cert_remove_hold_envsetup"
        #environment setup starts here
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

cert_remove_hold_envcleanup()
{
    rlPhaseStartCleanup "cert_remove_hold_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

cert_remove_hold_1001()
{ #test_scenario (positive): --cert_id
    rlPhaseStartTest "cert_remove_hold_1001"
        local testID="cert_remove_hold_1001"
        local tmpout=$TmpDir/cert_remove_hold_1001.$RANDOM.out
        KinitAsAdmin
        rlRun "ipa cert-remove-hold $testID --cert_id " 0 "test options: " 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_remove_hold_1001

#END OF TEST CASE for [cert-remove-hold]

#############################################
#  test suite: cert-request (10 test cases)
#############################################
cert_request()
{
    cert_request_envsetup
    cert_request_1001  #test_scenario (negative test): [--add --principal;negative;STR --request-type;positive;STR]
    cert_request_1002  #test_scenario (negative test): [--add --principal;positive;STR --request-type;negative;STR]
    cert_request_1003  #test_scenario (positive test): [--add --principal;positive;STR --request-type;positive;STR]
    cert_request_1004  #test_scenario (negative test): [--principal;negative;STR]
    cert_request_1005  #test_scenario (negative test): [--principal;negative;STR --request-type;positive;STR]
    cert_request_1006  #test_scenario (positive test): [--principal;positive;STR]
    cert_request_1007  #test_scenario (negative test): [--principal;positive;STR --request-type;negative;STR]
    cert_request_1008  #test_scenario (positive test): [--principal;positive;STR --request-type;positive;STR]
    cert_request_1009  #test_scenario (negative test): [--request-type;negative;STR]
    cert_request_1010  #test_scenario (positive test): [--request-type;positive;STR]
    cert_request_envcleanup
} #cert-request

cert_request_envsetup()
{
    rlPhaseStartSetup "cert_request_envsetup"
        #environment setup starts here
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

cert_request_envcleanup()
{
    rlPhaseStartCleanup "cert_request_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

cert_request_1001()
{ #test_scenario (negative): --add --principal;negative;STR --request-type;positive;STR
    rlPhaseStartTest "cert_request_1001"
        local testID="cert_request_1001"
        local tmpout=$TmpDir/cert_request_1001.$RANDOM.out
        KinitAsAdmin
        local principal_TestValue_Negative="replace_me" #principal;negative;STR 
        local request-type_TestValue="replace_me" #request-type;positive;STR
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        qaRun "ipa cert-request $testID --add  --principal=$principal_TestValue_Negative  --request-type=$request-type_TestValue " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [principal]=[$principal_TestValue_Negative] [request-type]=[$request-type_TestValue]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_request_1001

cert_request_1002()
{ #test_scenario (negative): --add --principal;positive;STR --request-type;negative;STR
    rlPhaseStartTest "cert_request_1002"
        local testID="cert_request_1002"
        local tmpout=$TmpDir/cert_request_1002.$RANDOM.out
        KinitAsAdmin
        local principal_TestValue="replace_me" #principal;positive;STR 
        local request-type_TestValue_Negative="replace_me" #request-type;negative;STR
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        qaRun "ipa cert-request $testID --add  --principal=$principal_TestValue  --request-type=$request-type_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [principal]=[$principal_TestValue] [request-type]=[$request-type_TestValue_Negative]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_request_1002

cert_request_1003()
{ #test_scenario (positive): --add --principal;positive;STR --request-type;positive;STR
    rlPhaseStartTest "cert_request_1003"
        local testID="cert_request_1003"
        local tmpout=$TmpDir/cert_request_1003.$RANDOM.out
        KinitAsAdmin
        local principal_TestValue="replace_me" #principal;positive;STR 
        local request-type_TestValue="replace_me" #request-type;positive;STR
        rlRun "ipa cert-request $testID --add  --principal=$principal_TestValue  --request-type=$request-type_TestValue " 0 "test options:  [principal]=[$principal_TestValue] [request-type]=[$request-type_TestValue]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_request_1003

cert_request_1004()
{ #test_scenario (negative): --principal;negative;STR
    rlPhaseStartTest "cert_request_1004"
        local testID="cert_request_1004"
        local tmpout=$TmpDir/cert_request_1004.$RANDOM.out
        KinitAsAdmin
        local principal_TestValue_Negative="replace_me" #principal;negative;STR
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        qaRun "ipa cert-request $testID  --principal=$principal_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [principal]=[$principal_TestValue_Negative]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_request_1004

cert_request_1005()
{ #test_scenario (negative): --principal;negative;STR --request-type;positive;STR
    rlPhaseStartTest "cert_request_1005"
        local testID="cert_request_1005"
        local tmpout=$TmpDir/cert_request_1005.$RANDOM.out
        KinitAsAdmin
        local principal_TestValue_Negative="replace_me" #principal;negative;STR 
        local request-type_TestValue="replace_me" #request-type;positive;STR
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        qaRun "ipa cert-request $testID  --principal=$principal_TestValue_Negative  --request-type=$request-type_TestValue " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [principal]=[$principal_TestValue_Negative] [request-type]=[$request-type_TestValue]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_request_1005

cert_request_1006()
{ #test_scenario (positive): --principal;positive;STR
    rlPhaseStartTest "cert_request_1006"
        local testID="cert_request_1006"
        local tmpout=$TmpDir/cert_request_1006.$RANDOM.out
        KinitAsAdmin
        local principal_TestValue="replace_me" #principal;positive;STR
        rlRun "ipa cert-request $testID  --principal=$principal_TestValue " 0 "test options:  [principal]=[$principal_TestValue]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_request_1006

cert_request_1007()
{ #test_scenario (negative): --principal;positive;STR --request-type;negative;STR
    rlPhaseStartTest "cert_request_1007"
        local testID="cert_request_1007"
        local tmpout=$TmpDir/cert_request_1007.$RANDOM.out
        KinitAsAdmin
        local principal_TestValue="replace_me" #principal;positive;STR 
        local request-type_TestValue_Negative="replace_me" #request-type;negative;STR
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        qaRun "ipa cert-request $testID  --principal=$principal_TestValue  --request-type=$request-type_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [principal]=[$principal_TestValue] [request-type]=[$request-type_TestValue_Negative]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_request_1007

cert_request_1008()
{ #test_scenario (positive): --principal;positive;STR --request-type;positive;STR
    rlPhaseStartTest "cert_request_1008"
        local testID="cert_request_1008"
        local tmpout=$TmpDir/cert_request_1008.$RANDOM.out
        KinitAsAdmin
        local principal_TestValue="replace_me" #principal;positive;STR 
        local request-type_TestValue="replace_me" #request-type;positive;STR
        rlRun "ipa cert-request $testID  --principal=$principal_TestValue  --request-type=$request-type_TestValue " 0 "test options:  [principal]=[$principal_TestValue] [request-type]=[$request-type_TestValue]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_request_1008

cert_request_1009()
{ #test_scenario (negative): --request-type;negative;STR
    rlPhaseStartTest "cert_request_1009"
        local testID="cert_request_1009"
        local tmpout=$TmpDir/cert_request_1009.$RANDOM.out
        KinitAsAdmin
        local request-type_TestValue_Negative="replace_me" #request-type;negative;STR
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        qaRun "ipa cert-request $testID  --request-type=$request-type_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [request-type]=[$request-type_TestValue_Negative]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_request_1009

cert_request_1010()
{ #test_scenario (positive): --request-type;positive;STR
    rlPhaseStartTest "cert_request_1010"
        local testID="cert_request_1010"
        local tmpout=$TmpDir/cert_request_1010.$RANDOM.out
        KinitAsAdmin
        local request-type_TestValue="replace_me" #request-type;positive;STR
        rlRun "ipa cert-request $testID  --request-type=$request-type_TestValue " 0 "test options:  [request-type]=[$request-type_TestValue]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_request_1010

#END OF TEST CASE for [cert-request]

#############################################
#  test suite: cert-revoke (2 test cases)
#############################################
cert_revoke()
{
    cert_revoke_envsetup
    cert_revoke_1001  #test_scenario (negative test): [--revocation-reason;negative;-1,11]
    cert_revoke_1002  #test_scenario (positive test): [--revocation-reason;positive;0,1,2,3,4,5,6,7,8,9,10]
    cert_revoke_envcleanup
} #cert-revoke

cert_revoke_envsetup()
{
    rlPhaseStartSetup "cert_revoke_envsetup"
        #environment setup starts here
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

cert_revoke_envcleanup()
{
    rlPhaseStartCleanup "cert_revoke_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

cert_revoke_1001()
{ #test_scenario (negative): --revocation-reason;negative;-1,11
    rlPhaseStartTest "cert_revoke_1001"
        local testID="cert_revoke_1001"
        local tmpout=$TmpDir/cert_revoke_1001.$RANDOM.out
        KinitAsAdmin
        local revocation-reason_TestValue_Negative="replace_me" #revocation-reason;negative;-1,11
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        qaRun "ipa cert-revoke $testID  --revocation-reason=$revocation-reason_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [revocation-reason]=[$revocation-reason_TestValue_Negative]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_revoke_1001

cert_revoke_1002()
{ #test_scenario (positive): --revocation-reason;positive;0,1,2,3,4,5,6,7,8,9,10
    rlPhaseStartTest "cert_revoke_1002"
        local testID="cert_revoke_1002"
        local tmpout=$TmpDir/cert_revoke_1002.$RANDOM.out
        KinitAsAdmin
        local revocation-reason_TestValue="replace_me" #revocation-reason;positive;0,1,2,3,4,5,6,7,8,9,10
        rlRun "ipa cert-revoke $testID  --revocation-reason=$revocation-reason_TestValue " 0 "test options:  [revocation-reason]=[$revocation-reason_TestValue]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_revoke_1002

#END OF TEST CASE for [cert-revoke]

#############################################
#  test suite: cert-show (2 test cases)
#############################################
cert_show()
{
    cert_show_envsetup
    cert_show_1001  #test_scenario (negative test): [--out;negative;CertOutFile]
    cert_show_1002  #test_scenario (positive test): [--out;positive;CertOutFile]
    cert_show_envcleanup
} #cert-show

cert_show_envsetup()
{
    rlPhaseStartSetup "cert_show_envsetup"
        #environment setup starts here
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

cert_show_envcleanup()
{
    rlPhaseStartCleanup "cert_show_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

cert_show_1001()
{ #test_scenario (negative): --out;negative;CertOutFile
    rlPhaseStartTest "cert_show_1001"
        local testID="cert_show_1001"
        local tmpout=$TmpDir/cert_show_1001.$RANDOM.out
        KinitAsAdmin
        local out_TestValue_Negative="replace_me" #out;negative;CertOutFile
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        qaRun "ipa cert-show $testID  --out=$out_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [out]=[$out_TestValue_Negative]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_show_1001

cert_show_1002()
{ #test_scenario (positive): --out;positive;CertOutFile
    rlPhaseStartTest "cert_show_1002"
        local testID="cert_show_1002"
        local tmpout=$TmpDir/cert_show_1002.$RANDOM.out
        KinitAsAdmin
        local out_TestValue="replace_me" #out;positive;CertOutFile
        rlRun "ipa cert-show $testID  --out=$out_TestValue " 0 "test options:  [out]=[$out_TestValue]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_show_1002

#END OF TEST CASE for [cert-show]

#############################################
#  test suite: cert-status (1 test cases)
#############################################
cert_status()
{
    cert_status_envsetup
    cert_status_1001  #test_scenario (positive test): [--cert_id]
    cert_status_envcleanup
} #cert-status

cert_status_envsetup()
{
    rlPhaseStartSetup "cert_status_envsetup"
        #environment setup starts here
        create_cert
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

cert_status_envcleanup()
{
    rlPhaseStartCleanup "cert_status_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

cert_status_1001()
{ #test_scenario (positive): --cert_id
    rlPhaseStartTest "cert_status_1001"
        local testID="cert_status_1001"
        local tmpout=$TmpDir/cert_status_1001.$RANDOM.out
        KinitAsAdmin
        rlRun "ipa cert-status $testID --cert_id " 0 "test options: " 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #cert_status_1001

#END OF TEST CASE for [cert-status]
