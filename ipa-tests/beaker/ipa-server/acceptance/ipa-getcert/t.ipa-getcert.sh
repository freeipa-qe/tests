#!/bin/bash
#testsuite : ipa-getcert
#author    : Yi Zhang (yzhang@redhat.com)
#testplan  : IPA client tool ipa-getcert Test Plan
#testplan version: 0.02
#last update time: 2011-04-07 15:04:05
#sequence number : 1

ipagetcert() #total test cases: 569
{
    request
    start_tracking
    stop_tracking
    resubmit
    list
    list_cas
} #ipagetcert

request()
{ #total test cases: 354
    request_envsetup
    request_1001	#scenario: [ipa-getcert request -d -n -t -P]	data: [NSSDBDIR negative] used
    request_1002	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used
    request_1003	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used
    request_1004	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used
    request_1005	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used
    request_1006	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used
    request_1007	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used
    request_1008	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used
    request_1009	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used
    request_1010	#scenario: [ipa-getcert request -d -n -t -p]	data: [NSSDBDIR negative] used
    request_1011	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used
    request_1012	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used
    request_1013	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used
    request_1014	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used
    request_1015	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used
    request_1016	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used
    request_1017	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used
    request_1018	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used
    request_1019	#scenario: [ipa-getcert request -d -n -t -P]	data: [CertNickName negative] used
    request_1020	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1021	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1022	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1023	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1024	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1025	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1026	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1027	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1028	#scenario: [ipa-getcert request -d -n -t -p]	data: [CertNickName negative] used
    request_1029	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1030	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1031	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1032	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1033	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1034	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1035	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1036	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1037	#scenario: [ipa-getcert request -d -n -t -P]	data: [CertTokenName negative] used
    request_1038	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertTokenName negative] used
    request_1039	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertTokenName negative] used
    request_1040	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertTokenName negative] used
    request_1041	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertTokenName negative] used
    request_1042	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertTokenName negative] used
    request_1043	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertTokenName negative] used
    request_1044	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertTokenName negative] used
    request_1045	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertTokenName negative] used
    request_1046	#scenario: [ipa-getcert request -d -n -t -p]	data: [CertTokenName negative] used
    request_1047	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertTokenName negative] used
    request_1048	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertTokenName negative] used
    request_1049	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertTokenName negative] used
    request_1050	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertTokenName negative] used
    request_1051	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertTokenName negative] used
    request_1052	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertTokenName negative] used
    request_1053	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertTokenName negative] used
    request_1054	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertTokenName negative] used
    request_1055	#scenario: [ipa-getcert request -d -n -t -P]	data: [CertPIN negative] used
    request_1056	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertPIN negative] used
    request_1057	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertPIN negative] used
    request_1058	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertPIN negative] used
    request_1059	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertPIN negative] used
    request_1060	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertPIN negative] used
    request_1061	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertPIN negative] used
    request_1062	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertPIN negative] used
    request_1063	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertPIN negative] used
    request_1064	#scenario: [ipa-getcert request -d -n -t -P]	data: all positive
    request_1065	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1066	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1067	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1068	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1069	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1070	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1071	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1072	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1073	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1074	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1075	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1076	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1077	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1078	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1079	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: all positive
    request_1080	#scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: all positive
    request_1081	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1082	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1083	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1084	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1085	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1086	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1087	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1088	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1089	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1090	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1091	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: all positive
    request_1092	#scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: all positive
    request_1093	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used
    request_1094	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used
    request_1095	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used
    request_1096	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used
    request_1097	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1098	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1099	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1100	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1101	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1102	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1103	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1104	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1105	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1106	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1107	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: all positive
    request_1108	#scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: all positive
    request_1109	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1110	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1111	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1112	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1113	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1114	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1115	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1116	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1117	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1118	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1119	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: all positive
    request_1120	#scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: all positive
    request_1121	#scenario: [ipa-getcert request -d -n -t -p]	data: [PINFILE negative] used
    request_1122	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [PINFILE negative] used
    request_1123	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [PINFILE negative] used
    request_1124	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [PINFILE negative] used
    request_1125	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [PINFILE negative] used
    request_1126	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [PINFILE negative] used
    request_1127	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [PINFILE negative] used
    request_1128	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [PINFILE negative] used
    request_1129	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [PINFILE negative] used
    request_1130	#scenario: [ipa-getcert request -d -n -t -p]	data: all positive
    request_1131	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1132	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1133	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1134	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1135	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1136	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1137	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1138	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1139	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1140	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1141	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1142	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1143	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1144	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1145	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: all positive
    request_1146	#scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: all positive
    request_1147	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1148	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1149	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1150	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1151	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1152	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1153	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1154	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1155	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1156	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1157	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: all positive
    request_1158	#scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: all positive
    request_1159	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used
    request_1160	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used
    request_1161	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used
    request_1162	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used
    request_1163	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1164	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1165	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1166	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1167	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1168	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1169	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1170	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1171	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1172	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1173	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: all positive
    request_1174	#scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: all positive
    request_1175	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1176	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1177	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1178	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1179	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1180	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1181	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1182	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1183	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1184	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1185	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: all positive
    request_1186	#scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: all positive
    request_1187	#scenario: [ipa-getcert request -k -f -P]	data: [PemKeyFile negative] used
    request_1188	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used
    request_1189	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used
    request_1190	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used
    request_1191	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used
    request_1192	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used
    request_1193	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used
    request_1194	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used
    request_1195	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used
    request_1196	#scenario: [ipa-getcert request -k -f -p]	data: [PemKeyFile negative] used
    request_1197	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used
    request_1198	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used
    request_1199	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used
    request_1200	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used
    request_1201	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used
    request_1202	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used
    request_1203	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used
    request_1204	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used
    request_1205	#scenario: [ipa-getcert request -k -f -P]	data: [PemCertFile negative] used
    request_1206	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [PemCertFile negative] used
    request_1207	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [PemCertFile negative] used
    request_1208	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [PemCertFile negative] used
    request_1209	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [PemCertFile negative] used
    request_1210	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [PemCertFile negative] used
    request_1211	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [PemCertFile negative] used
    request_1212	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [PemCertFile negative] used
    request_1213	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [PemCertFile negative] used
    request_1214	#scenario: [ipa-getcert request -k -f -p]	data: [PemCertFile negative] used
    request_1215	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [PemCertFile negative] used
    request_1216	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [PemCertFile negative] used
    request_1217	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [PemCertFile negative] used
    request_1218	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [PemCertFile negative] used
    request_1219	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [PemCertFile negative] used
    request_1220	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [PemCertFile negative] used
    request_1221	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [PemCertFile negative] used
    request_1222	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [PemCertFile negative] used
    request_1223	#scenario: [ipa-getcert request -k -f -P]	data: [CertPIN negative] used
    request_1224	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertPIN negative] used
    request_1225	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertPIN negative] used
    request_1226	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertPIN negative] used
    request_1227	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertPIN negative] used
    request_1228	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertPIN negative] used
    request_1229	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertPIN negative] used
    request_1230	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertPIN negative] used
    request_1231	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertPIN negative] used
    request_1232	#scenario: [ipa-getcert request -k -f -P]	data: all positive
    request_1233	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1234	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1235	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1236	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1237	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1238	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1239	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1240	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1241	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1242	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1243	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1244	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1245	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1246	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1247	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: all positive
    request_1248	#scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: all positive
    request_1249	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1250	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1251	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1252	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1253	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1254	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1255	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1256	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1257	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1258	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1259	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: all positive
    request_1260	#scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: all positive
    request_1261	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used
    request_1262	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used
    request_1263	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used
    request_1264	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used
    request_1265	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1266	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1267	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1268	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1269	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1270	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1271	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1272	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1273	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1274	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1275	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: all positive
    request_1276	#scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: all positive
    request_1277	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1278	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1279	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1280	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1281	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1282	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1283	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1284	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1285	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1286	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1287	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: all positive
    request_1288	#scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: all positive
    request_1289	#scenario: [ipa-getcert request -k -f -p]	data: [PINFILE negative] used
    request_1290	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [PINFILE negative] used
    request_1291	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [PINFILE negative] used
    request_1292	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [PINFILE negative] used
    request_1293	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [PINFILE negative] used
    request_1294	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [PINFILE negative] used
    request_1295	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [PINFILE negative] used
    request_1296	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [PINFILE negative] used
    request_1297	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [PINFILE negative] used
    request_1298	#scenario: [ipa-getcert request -k -f -p]	data: all positive
    request_1299	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1300	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1301	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used
    request_1302	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used
    request_1303	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1304	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1305	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1306	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1307	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1308	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1309	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1310	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1311	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1312	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1313	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: all positive
    request_1314	#scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: all positive
    request_1315	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1316	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1317	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1318	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1319	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1320	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1321	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1322	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1323	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1324	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1325	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: all positive
    request_1326	#scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: all positive
    request_1327	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used
    request_1328	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used
    request_1329	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used
    request_1330	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used
    request_1331	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1332	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1333	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1334	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1335	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1336	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1337	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1338	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1339	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1340	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1341	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: all positive
    request_1342	#scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: all positive
    request_1343	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used
    request_1344	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used
    request_1345	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used
    request_1346	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used
    request_1347	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used
    request_1348	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used
    request_1349	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [DNSName negative] used
    request_1350	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [DNSName negative] used
    request_1351	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used
    request_1352	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used
    request_1353	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: all positive
    request_1354	#scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: all positive
    request_envcleanup
} #request
request_envsetup()
{
    rlPhaseStartSetup "request_envsetup"
        #environment setup starts here
        #environment setup ends   here
    rlPhaseEnd
} #envsetup
request_envcleanup()
{
    rlPhaseStartCleanup "request_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

request_1001()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] 
{  
    rlPhaseStartTest "request_1001 [negative test] scenario: [ipa-getcert request -d -n -t -P]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1001" 
        local tmpout=$TmpDir/request_1001.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -P]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1001
request_1002()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1002 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1002" 
        local tmpout=$TmpDir/request_1002.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1002
request_1003()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1003 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1003" 
        local tmpout=$TmpDir/request_1003.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1003
request_1004()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1004 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1004" 
        local tmpout=$TmpDir/request_1004.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1004
request_1005()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1005 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1005" 
        local tmpout=$TmpDir/request_1005.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1005
request_1006()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1006 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1006" 
        local tmpout=$TmpDir/request_1006.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1006
request_1007()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1007 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1007" 
        local tmpout=$TmpDir/request_1007.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1007
request_1008()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1008 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1008" 
        local tmpout=$TmpDir/request_1008.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1008
request_1009()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1009 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1009" 
        local tmpout=$TmpDir/request_1009.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1009
request_1010()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] 
{  
    rlPhaseStartTest "request_1010 [negative test] scenario: [ipa-getcert request -d -n -t -p]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1010" 
        local tmpout=$TmpDir/request_1010.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -p]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1010
request_1011()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1011 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1011" 
        local tmpout=$TmpDir/request_1011.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1011
request_1012()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1012 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1012" 
        local tmpout=$TmpDir/request_1012.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1012
request_1013()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1013 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1013" 
        local tmpout=$TmpDir/request_1013.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1013
request_1014()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1014 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1014" 
        local tmpout=$TmpDir/request_1014.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1014
request_1015()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1015 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1015" 
        local tmpout=$TmpDir/request_1015.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1015
request_1016()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1016 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1016" 
        local tmpout=$TmpDir/request_1016.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1016
request_1017()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1017 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1017" 
        local tmpout=$TmpDir/request_1017.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1017
request_1018()  #ipa-getcert request -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1018 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="request_1018" 
        local tmpout=$TmpDir/request_1018.$RANDOM.out 

        # test local variables
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1018
request_1019()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] 
{  
    rlPhaseStartTest "request_1019 [negative test] scenario: [ipa-getcert request -d -n -t -P]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1019" 
        local tmpout=$TmpDir/request_1019.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1019
request_1020()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1020 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1020" 
        local tmpout=$TmpDir/request_1020.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1020
request_1021()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1021 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1021" 
        local tmpout=$TmpDir/request_1021.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1021
request_1022()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1022 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1022" 
        local tmpout=$TmpDir/request_1022.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1022
request_1023()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1023 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1023" 
        local tmpout=$TmpDir/request_1023.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1023
request_1024()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1024 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1024" 
        local tmpout=$TmpDir/request_1024.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1024
request_1025()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1025 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1025" 
        local tmpout=$TmpDir/request_1025.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1025
request_1026()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1026 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1026" 
        local tmpout=$TmpDir/request_1026.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1026
request_1027()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1027 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1027" 
        local tmpout=$TmpDir/request_1027.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1027
request_1028()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] 
{  
    rlPhaseStartTest "request_1028 [negative test] scenario: [ipa-getcert request -d -n -t -p]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1028" 
        local tmpout=$TmpDir/request_1028.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1028
request_1029()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1029 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1029" 
        local tmpout=$TmpDir/request_1029.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1029
request_1030()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1030 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1030" 
        local tmpout=$TmpDir/request_1030.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1030
request_1031()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1031 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1031" 
        local tmpout=$TmpDir/request_1031.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1031
request_1032()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1032 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1032" 
        local tmpout=$TmpDir/request_1032.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1032
request_1033()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1033 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1033" 
        local tmpout=$TmpDir/request_1033.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1033
request_1034()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1034 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1034" 
        local tmpout=$TmpDir/request_1034.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1034
request_1035()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1035 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1035" 
        local tmpout=$TmpDir/request_1035.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1035
request_1036()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1036 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1036" 
        local tmpout=$TmpDir/request_1036.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1036
request_1037()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] 
{  
    rlPhaseStartTest "request_1037 [negative test] scenario: [ipa-getcert request -d -n -t -P]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1037" 
        local tmpout=$TmpDir/request_1037.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1037
request_1038()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1038 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1038" 
        local tmpout=$TmpDir/request_1038.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1038
request_1039()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1039 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1039" 
        local tmpout=$TmpDir/request_1039.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1039
request_1040()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1040 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1040" 
        local tmpout=$TmpDir/request_1040.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1040
request_1041()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1041 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1041" 
        local tmpout=$TmpDir/request_1041.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1041
request_1042()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1042 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1042" 
        local tmpout=$TmpDir/request_1042.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1042
request_1043()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1043 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1043" 
        local tmpout=$TmpDir/request_1043.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1043
request_1044()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1044 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1044" 
        local tmpout=$TmpDir/request_1044.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1044
request_1045()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1045 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1045" 
        local tmpout=$TmpDir/request_1045.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1045
request_1046()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] 
{  
    rlPhaseStartTest "request_1046 [negative test] scenario: [ipa-getcert request -d -n -t -p]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1046" 
        local tmpout=$TmpDir/request_1046.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1046
request_1047()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1047 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1047" 
        local tmpout=$TmpDir/request_1047.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1047
request_1048()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1048 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1048" 
        local tmpout=$TmpDir/request_1048.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1048
request_1049()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1049 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1049" 
        local tmpout=$TmpDir/request_1049.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1049
request_1050()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1050 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1050" 
        local tmpout=$TmpDir/request_1050.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1050
request_1051()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1051 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1051" 
        local tmpout=$TmpDir/request_1051.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1051
request_1052()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1052 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1052" 
        local tmpout=$TmpDir/request_1052.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1052
request_1053()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1053 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1053" 
        local tmpout=$TmpDir/request_1053.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1053
request_1054()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1054 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="request_1054" 
        local tmpout=$TmpDir/request_1054.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1054
request_1055()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] 
{  
    rlPhaseStartTest "request_1055 [negative test] scenario: [ipa-getcert request -d -n -t -P]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1055" 
        local tmpout=$TmpDir/request_1055.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1055
request_1056()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1056 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1056" 
        local tmpout=$TmpDir/request_1056.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1056
request_1057()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1057 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1057" 
        local tmpout=$TmpDir/request_1057.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1057
request_1058()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1058 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1058" 
        local tmpout=$TmpDir/request_1058.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1058
request_1059()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1059 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1059" 
        local tmpout=$TmpDir/request_1059.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1059
request_1060()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1060 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1060" 
        local tmpout=$TmpDir/request_1060.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1060
request_1061()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1061 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1061" 
        local tmpout=$TmpDir/request_1061.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1061
request_1062()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1062 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1062" 
        local tmpout=$TmpDir/request_1062.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1062
request_1063()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1063 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1063" 
        local tmpout=$TmpDir/request_1063.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1063
request_1064()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] 
{ 
    rlPhaseStartTest "request_1064 [positive test] scenario: [ipa-getcert request -d -n -t -P]	data: all positive" 
        # test setup 
        local testID="request_1064"  
        local tmpout=$TmpDir/request_1064.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive" 0 "scenario: [ipa-getcert request -d -n -t -P]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1064 

request_1065()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1065 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1065" 
        local tmpout=$TmpDir/request_1065.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1065
request_1066()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1066 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1066" 
        local tmpout=$TmpDir/request_1066.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1066
request_1067()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1067 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1067" 
        local tmpout=$TmpDir/request_1067.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1067
request_1068()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1068 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1068" 
        local tmpout=$TmpDir/request_1068.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1068
request_1069()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1069 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1069" 
        local tmpout=$TmpDir/request_1069.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1069
request_1070()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1070 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1070" 
        local tmpout=$TmpDir/request_1070.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1070
request_1071()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1071 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1071" 
        local tmpout=$TmpDir/request_1071.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1071
request_1072()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1072 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1072" 
        local tmpout=$TmpDir/request_1072.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1072
request_1073()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1073 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1073" 
        local tmpout=$TmpDir/request_1073.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1073
request_1074()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1074 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1074" 
        local tmpout=$TmpDir/request_1074.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1074
request_1075()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1075 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1075" 
        local tmpout=$TmpDir/request_1075.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1075
request_1076()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1076 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1076" 
        local tmpout=$TmpDir/request_1076.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1076
request_1077()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1077 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1077" 
        local tmpout=$TmpDir/request_1077.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1077
request_1078()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1078 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1078" 
        local tmpout=$TmpDir/request_1078.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1078
request_1079()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1079 [positive test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1079"  
        local tmpout=$TmpDir/request_1079.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1079 

request_1080()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1080 [positive test] scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1080"  
        local tmpout=$TmpDir/request_1080.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -d -n -t -P -I -R -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1080 

request_1081()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1081 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1081" 
        local tmpout=$TmpDir/request_1081.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1081
request_1082()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1082 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1082" 
        local tmpout=$TmpDir/request_1082.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1082
request_1083()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1083 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1083" 
        local tmpout=$TmpDir/request_1083.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1083
request_1084()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1084 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1084" 
        local tmpout=$TmpDir/request_1084.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1084
request_1085()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1085 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1085" 
        local tmpout=$TmpDir/request_1085.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1085
request_1086()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1086 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1086" 
        local tmpout=$TmpDir/request_1086.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1086
request_1087()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1087 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1087" 
        local tmpout=$TmpDir/request_1087.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1087
request_1088()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1088 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1088" 
        local tmpout=$TmpDir/request_1088.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1088
request_1089()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1089 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1089" 
        local tmpout=$TmpDir/request_1089.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1089
request_1090()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1090 [negative test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1090" 
        local tmpout=$TmpDir/request_1090.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1090
request_1091()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1091 [positive test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1091"  
        local tmpout=$TmpDir/request_1091.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1091 

request_1092()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1092 [positive test] scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1092"  
        local tmpout=$TmpDir/request_1092.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -d -n -t -P -I -r -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1092 

request_1093()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1093 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1093" 
        local tmpout=$TmpDir/request_1093.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1093
request_1094()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1094 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1094" 
        local tmpout=$TmpDir/request_1094.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1094
request_1095()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1095 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1095" 
        local tmpout=$TmpDir/request_1095.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1095
request_1096()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1096 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1096" 
        local tmpout=$TmpDir/request_1096.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1096
request_1097()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1097 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1097" 
        local tmpout=$TmpDir/request_1097.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1097
request_1098()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1098 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1098" 
        local tmpout=$TmpDir/request_1098.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1098
request_1099()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1099 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1099" 
        local tmpout=$TmpDir/request_1099.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1099
request_1100()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1100 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1100" 
        local tmpout=$TmpDir/request_1100.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1100
request_1101()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1101 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1101" 
        local tmpout=$TmpDir/request_1101.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1101
request_1102()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1102 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1102" 
        local tmpout=$TmpDir/request_1102.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1102
request_1103()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1103 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1103" 
        local tmpout=$TmpDir/request_1103.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1103
request_1104()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1104 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1104" 
        local tmpout=$TmpDir/request_1104.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1104
request_1105()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1105 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1105" 
        local tmpout=$TmpDir/request_1105.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1105
request_1106()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1106 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1106" 
        local tmpout=$TmpDir/request_1106.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1106
request_1107()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1107 [positive test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1107"  
        local tmpout=$TmpDir/request_1107.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1107 

request_1108()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1108 [positive test] scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1108"  
        local tmpout=$TmpDir/request_1108.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -d -n -t -P -g -R -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1108 

request_1109()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1109 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1109" 
        local tmpout=$TmpDir/request_1109.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1109
request_1110()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1110 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1110" 
        local tmpout=$TmpDir/request_1110.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1110
request_1111()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1111 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1111" 
        local tmpout=$TmpDir/request_1111.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1111
request_1112()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1112 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1112" 
        local tmpout=$TmpDir/request_1112.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1112
request_1113()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1113 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1113" 
        local tmpout=$TmpDir/request_1113.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1113
request_1114()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1114 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1114" 
        local tmpout=$TmpDir/request_1114.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1114
request_1115()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1115 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1115" 
        local tmpout=$TmpDir/request_1115.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1115
request_1116()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1116 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1116" 
        local tmpout=$TmpDir/request_1116.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1116
request_1117()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1117 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1117" 
        local tmpout=$TmpDir/request_1117.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1117
request_1118()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1118 [negative test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1118" 
        local tmpout=$TmpDir/request_1118.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1118
request_1119()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1119 [positive test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1119"  
        local tmpout=$TmpDir/request_1119.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1119 

request_1120()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1120 [positive test] scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1120"  
        local tmpout=$TmpDir/request_1120.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -d -n -t -P -g -r -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1120 

request_1121()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] 
{  
    rlPhaseStartTest "request_1121 [negative test] scenario: [ipa-getcert request -d -n -t -p]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1121" 
        local tmpout=$TmpDir/request_1121.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1121
request_1122()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1122 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1122" 
        local tmpout=$TmpDir/request_1122.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1122
request_1123()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1123 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1123" 
        local tmpout=$TmpDir/request_1123.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1123
request_1124()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1124 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1124" 
        local tmpout=$TmpDir/request_1124.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1124
request_1125()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1125 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1125" 
        local tmpout=$TmpDir/request_1125.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1125
request_1126()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1126 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1126" 
        local tmpout=$TmpDir/request_1126.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1126
request_1127()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1127 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1127" 
        local tmpout=$TmpDir/request_1127.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1127
request_1128()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1128 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1128" 
        local tmpout=$TmpDir/request_1128.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1128
request_1129()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1129 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1129" 
        local tmpout=$TmpDir/request_1129.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1129
request_1130()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] 
{ 
    rlPhaseStartTest "request_1130 [positive test] scenario: [ipa-getcert request -d -n -t -p]	data: all positive" 
        # test setup 
        local testID="request_1130"  
        local tmpout=$TmpDir/request_1130.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive" 0 "scenario: [ipa-getcert request -d -n -t -p]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1130 

request_1131()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1131 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1131" 
        local tmpout=$TmpDir/request_1131.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1131
request_1132()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1132 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1132" 
        local tmpout=$TmpDir/request_1132.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1132
request_1133()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1133 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1133" 
        local tmpout=$TmpDir/request_1133.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1133
request_1134()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1134 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1134" 
        local tmpout=$TmpDir/request_1134.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1134
request_1135()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1135 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1135" 
        local tmpout=$TmpDir/request_1135.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1135
request_1136()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1136 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1136" 
        local tmpout=$TmpDir/request_1136.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1136
request_1137()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1137 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1137" 
        local tmpout=$TmpDir/request_1137.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1137
request_1138()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1138 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1138" 
        local tmpout=$TmpDir/request_1138.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1138
request_1139()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1139 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1139" 
        local tmpout=$TmpDir/request_1139.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1139
request_1140()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1140 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1140" 
        local tmpout=$TmpDir/request_1140.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1140
request_1141()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1141 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1141" 
        local tmpout=$TmpDir/request_1141.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1141
request_1142()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1142 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1142" 
        local tmpout=$TmpDir/request_1142.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1142
request_1143()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1143 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1143" 
        local tmpout=$TmpDir/request_1143.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1143
request_1144()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1144 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1144" 
        local tmpout=$TmpDir/request_1144.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1144
request_1145()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1145 [positive test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1145"  
        local tmpout=$TmpDir/request_1145.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1145 

request_1146()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1146 [positive test] scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1146"  
        local tmpout=$TmpDir/request_1146.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -d -n -t -p -I -R -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1146 

request_1147()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1147 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1147" 
        local tmpout=$TmpDir/request_1147.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1147
request_1148()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1148 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1148" 
        local tmpout=$TmpDir/request_1148.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1148
request_1149()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1149 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1149" 
        local tmpout=$TmpDir/request_1149.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1149
request_1150()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1150 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1150" 
        local tmpout=$TmpDir/request_1150.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1150
request_1151()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1151 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1151" 
        local tmpout=$TmpDir/request_1151.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1151
request_1152()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1152 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1152" 
        local tmpout=$TmpDir/request_1152.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1152
request_1153()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1153 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1153" 
        local tmpout=$TmpDir/request_1153.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1153
request_1154()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1154 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1154" 
        local tmpout=$TmpDir/request_1154.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1154
request_1155()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1155 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1155" 
        local tmpout=$TmpDir/request_1155.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1155
request_1156()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1156 [negative test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1156" 
        local tmpout=$TmpDir/request_1156.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1156
request_1157()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1157 [positive test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1157"  
        local tmpout=$TmpDir/request_1157.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1157 

request_1158()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1158 [positive test] scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1158"  
        local tmpout=$TmpDir/request_1158.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -d -n -t -p -I -r -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1158 

request_1159()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1159 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1159" 
        local tmpout=$TmpDir/request_1159.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1159
request_1160()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1160 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1160" 
        local tmpout=$TmpDir/request_1160.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1160
request_1161()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1161 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1161" 
        local tmpout=$TmpDir/request_1161.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1161
request_1162()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1162 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1162" 
        local tmpout=$TmpDir/request_1162.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1162
request_1163()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1163 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1163" 
        local tmpout=$TmpDir/request_1163.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1163
request_1164()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1164 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1164" 
        local tmpout=$TmpDir/request_1164.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1164
request_1165()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1165 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1165" 
        local tmpout=$TmpDir/request_1165.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1165
request_1166()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1166 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1166" 
        local tmpout=$TmpDir/request_1166.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1166
request_1167()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1167 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1167" 
        local tmpout=$TmpDir/request_1167.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1167
request_1168()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1168 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1168" 
        local tmpout=$TmpDir/request_1168.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1168
request_1169()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1169 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1169" 
        local tmpout=$TmpDir/request_1169.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1169
request_1170()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1170 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1170" 
        local tmpout=$TmpDir/request_1170.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1170
request_1171()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1171 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1171" 
        local tmpout=$TmpDir/request_1171.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1171
request_1172()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1172 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1172" 
        local tmpout=$TmpDir/request_1172.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1172
request_1173()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1173 [positive test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1173"  
        local tmpout=$TmpDir/request_1173.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1173 

request_1174()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1174 [positive test] scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1174"  
        local tmpout=$TmpDir/request_1174.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -d -n -t -p -g -R -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1174 

request_1175()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1175 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1175" 
        local tmpout=$TmpDir/request_1175.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1175
request_1176()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1176 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1176" 
        local tmpout=$TmpDir/request_1176.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1176
request_1177()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1177 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1177" 
        local tmpout=$TmpDir/request_1177.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1177
request_1178()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1178 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1178" 
        local tmpout=$TmpDir/request_1178.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1178
request_1179()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1179 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1179" 
        local tmpout=$TmpDir/request_1179.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1179
request_1180()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1180 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1180" 
        local tmpout=$TmpDir/request_1180.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1180
request_1181()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1181 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1181" 
        local tmpout=$TmpDir/request_1181.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1181
request_1182()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1182 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1182" 
        local tmpout=$TmpDir/request_1182.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1182
request_1183()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1183 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1183" 
        local tmpout=$TmpDir/request_1183.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1183
request_1184()  #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1184 [negative test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1184" 
        local tmpout=$TmpDir/request_1184.$RANDOM.out 

        # test local variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1184
request_1185()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1185 [positive test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1185"  
        local tmpout=$TmpDir/request_1185.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1185 

request_1186()   #ipa-getcert request -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1186 [positive test] scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1186"  
        local tmpout=$TmpDir/request_1186.$RANDOM.out 

        # local test variables
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -d -n -t -p -g -r -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1186 

request_1187()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -P [CertPIN positive] 
{  
    rlPhaseStartTest "request_1187 [negative test] scenario: [ipa-getcert request -k -f -P]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1187" 
        local tmpout=$TmpDir/request_1187.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -P $CertPIN_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1187
request_1188()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1188 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1188" 
        local tmpout=$TmpDir/request_1188.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1188
request_1189()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1189 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1189" 
        local tmpout=$TmpDir/request_1189.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1189
request_1190()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1190 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1190" 
        local tmpout=$TmpDir/request_1190.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1190
request_1191()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1191 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1191" 
        local tmpout=$TmpDir/request_1191.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1191
request_1192()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1192 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1192" 
        local tmpout=$TmpDir/request_1192.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1192
request_1193()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1193 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1193" 
        local tmpout=$TmpDir/request_1193.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1193
request_1194()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1194 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1194" 
        local tmpout=$TmpDir/request_1194.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1194
request_1195()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1195 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1195" 
        local tmpout=$TmpDir/request_1195.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1195
request_1196()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -p [PINFILE positive] 
{  
    rlPhaseStartTest "request_1196 [negative test] scenario: [ipa-getcert request -k -f -p]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1196" 
        local tmpout=$TmpDir/request_1196.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -p $PINFILE_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1196
request_1197()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1197 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1197" 
        local tmpout=$TmpDir/request_1197.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1197
request_1198()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1198 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1198" 
        local tmpout=$TmpDir/request_1198.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1198
request_1199()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1199 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1199" 
        local tmpout=$TmpDir/request_1199.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1199
request_1200()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1200 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1200" 
        local tmpout=$TmpDir/request_1200.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1200
request_1201()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1201 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1201" 
        local tmpout=$TmpDir/request_1201.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1201
request_1202()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1202 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1202" 
        local tmpout=$TmpDir/request_1202.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1202
request_1203()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1203 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1203" 
        local tmpout=$TmpDir/request_1203.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1203
request_1204()  #ipa-getcert request -k [PemKeyFile negative] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1204 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="request_1204" 
        local tmpout=$TmpDir/request_1204.$RANDOM.out 

        # test local variables
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_negative -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1204
request_1205()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -P [CertPIN positive] 
{  
    rlPhaseStartTest "request_1205 [negative test] scenario: [ipa-getcert request -k -f -P]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1205" 
        local tmpout=$TmpDir/request_1205.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -P $CertPIN_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1205
request_1206()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1206 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1206" 
        local tmpout=$TmpDir/request_1206.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1206
request_1207()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1207 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1207" 
        local tmpout=$TmpDir/request_1207.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1207
request_1208()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1208 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1208" 
        local tmpout=$TmpDir/request_1208.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1208
request_1209()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1209 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1209" 
        local tmpout=$TmpDir/request_1209.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1209
request_1210()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1210 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1210" 
        local tmpout=$TmpDir/request_1210.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1210
request_1211()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1211 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1211" 
        local tmpout=$TmpDir/request_1211.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1211
request_1212()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1212 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1212" 
        local tmpout=$TmpDir/request_1212.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1212
request_1213()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1213 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1213" 
        local tmpout=$TmpDir/request_1213.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1213
request_1214()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -p [PINFILE positive] 
{  
    rlPhaseStartTest "request_1214 [negative test] scenario: [ipa-getcert request -k -f -p]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1214" 
        local tmpout=$TmpDir/request_1214.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -p $PINFILE_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1214
request_1215()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1215 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1215" 
        local tmpout=$TmpDir/request_1215.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1215
request_1216()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1216 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1216" 
        local tmpout=$TmpDir/request_1216.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1216
request_1217()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1217 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1217" 
        local tmpout=$TmpDir/request_1217.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1217
request_1218()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1218 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1218" 
        local tmpout=$TmpDir/request_1218.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1218
request_1219()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1219 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1219" 
        local tmpout=$TmpDir/request_1219.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1219
request_1220()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1220 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1220" 
        local tmpout=$TmpDir/request_1220.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1220
request_1221()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1221 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1221" 
        local tmpout=$TmpDir/request_1221.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1221
request_1222()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile negative] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1222 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="request_1222" 
        local tmpout=$TmpDir/request_1222.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_negative -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1222
request_1223()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN negative] 
{  
    rlPhaseStartTest "request_1223 [negative test] scenario: [ipa-getcert request -k -f -P]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1223" 
        local tmpout=$TmpDir/request_1223.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1223
request_1224()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN negative] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1224 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1224" 
        local tmpout=$TmpDir/request_1224.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_negative -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1224
request_1225()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN negative] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1225 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1225" 
        local tmpout=$TmpDir/request_1225.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_negative -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1225
request_1226()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN negative] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1226 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1226" 
        local tmpout=$TmpDir/request_1226.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_negative -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1226
request_1227()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN negative] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1227 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1227" 
        local tmpout=$TmpDir/request_1227.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_negative -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1227
request_1228()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN negative] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1228 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1228" 
        local tmpout=$TmpDir/request_1228.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_negative -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1228
request_1229()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN negative] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1229 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1229" 
        local tmpout=$TmpDir/request_1229.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_negative -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1229
request_1230()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN negative] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1230 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1230" 
        local tmpout=$TmpDir/request_1230.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_negative -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1230
request_1231()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN negative] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1231 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertPIN negative] used" 
        # test setup 
        local testID="request_1231" 
        local tmpout=$TmpDir/request_1231.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_negative -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1231
request_1232()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] 
{ 
    rlPhaseStartTest "request_1232 [positive test] scenario: [ipa-getcert request -k -f -P]	data: all positive" 
        # test setup 
        local testID="request_1232"  
        local tmpout=$TmpDir/request_1232.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive" 0 "scenario: [ipa-getcert request -k -f -P]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1232 

request_1233()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1233 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1233" 
        local tmpout=$TmpDir/request_1233.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1233
request_1234()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1234 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1234" 
        local tmpout=$TmpDir/request_1234.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1234
request_1235()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1235 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1235" 
        local tmpout=$TmpDir/request_1235.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1235
request_1236()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1236 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1236" 
        local tmpout=$TmpDir/request_1236.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1236
request_1237()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1237 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1237" 
        local tmpout=$TmpDir/request_1237.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1237
request_1238()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1238 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1238" 
        local tmpout=$TmpDir/request_1238.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1238
request_1239()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1239 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1239" 
        local tmpout=$TmpDir/request_1239.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1239
request_1240()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1240 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1240" 
        local tmpout=$TmpDir/request_1240.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1240
request_1241()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1241 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1241" 
        local tmpout=$TmpDir/request_1241.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1241
request_1242()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1242 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1242" 
        local tmpout=$TmpDir/request_1242.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1242
request_1243()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1243 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1243" 
        local tmpout=$TmpDir/request_1243.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1243
request_1244()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1244 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1244" 
        local tmpout=$TmpDir/request_1244.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1244
request_1245()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1245 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1245" 
        local tmpout=$TmpDir/request_1245.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1245
request_1246()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1246 [negative test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1246" 
        local tmpout=$TmpDir/request_1246.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1246
request_1247()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1247 [positive test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1247"  
        local tmpout=$TmpDir/request_1247.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1247 

request_1248()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1248 [positive test] scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1248"  
        local tmpout=$TmpDir/request_1248.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -k -f -P -I -R -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1248 

request_1249()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1249 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1249" 
        local tmpout=$TmpDir/request_1249.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1249
request_1250()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1250 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1250" 
        local tmpout=$TmpDir/request_1250.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1250
request_1251()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1251 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1251" 
        local tmpout=$TmpDir/request_1251.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1251
request_1252()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1252 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1252" 
        local tmpout=$TmpDir/request_1252.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1252
request_1253()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1253 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1253" 
        local tmpout=$TmpDir/request_1253.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1253
request_1254()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1254 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1254" 
        local tmpout=$TmpDir/request_1254.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1254
request_1255()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1255 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1255" 
        local tmpout=$TmpDir/request_1255.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1255
request_1256()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1256 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1256" 
        local tmpout=$TmpDir/request_1256.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1256
request_1257()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1257 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1257" 
        local tmpout=$TmpDir/request_1257.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1257
request_1258()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1258 [negative test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1258" 
        local tmpout=$TmpDir/request_1258.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1258
request_1259()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1259 [positive test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1259"  
        local tmpout=$TmpDir/request_1259.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1259 

request_1260()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1260 [positive test] scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1260"  
        local tmpout=$TmpDir/request_1260.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -k -f -P -I -r -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1260 

request_1261()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1261 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1261" 
        local tmpout=$TmpDir/request_1261.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1261
request_1262()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1262 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1262" 
        local tmpout=$TmpDir/request_1262.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1262
request_1263()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1263 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1263" 
        local tmpout=$TmpDir/request_1263.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1263
request_1264()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1264 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1264" 
        local tmpout=$TmpDir/request_1264.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1264
request_1265()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1265 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1265" 
        local tmpout=$TmpDir/request_1265.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1265
request_1266()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1266 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1266" 
        local tmpout=$TmpDir/request_1266.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1266
request_1267()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1267 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1267" 
        local tmpout=$TmpDir/request_1267.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1267
request_1268()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1268 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1268" 
        local tmpout=$TmpDir/request_1268.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1268
request_1269()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1269 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1269" 
        local tmpout=$TmpDir/request_1269.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1269
request_1270()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1270 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1270" 
        local tmpout=$TmpDir/request_1270.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1270
request_1271()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1271 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1271" 
        local tmpout=$TmpDir/request_1271.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1271
request_1272()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1272 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1272" 
        local tmpout=$TmpDir/request_1272.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1272
request_1273()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1273 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1273" 
        local tmpout=$TmpDir/request_1273.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1273
request_1274()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1274 [negative test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1274" 
        local tmpout=$TmpDir/request_1274.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1274
request_1275()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1275 [positive test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1275"  
        local tmpout=$TmpDir/request_1275.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1275 

request_1276()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1276 [positive test] scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1276"  
        local tmpout=$TmpDir/request_1276.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -k -f -P -g -R -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1276 

request_1277()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1277 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1277" 
        local tmpout=$TmpDir/request_1277.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1277
request_1278()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1278 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1278" 
        local tmpout=$TmpDir/request_1278.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1278
request_1279()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1279 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1279" 
        local tmpout=$TmpDir/request_1279.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1279
request_1280()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1280 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1280" 
        local tmpout=$TmpDir/request_1280.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1280
request_1281()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1281 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1281" 
        local tmpout=$TmpDir/request_1281.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1281
request_1282()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1282 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1282" 
        local tmpout=$TmpDir/request_1282.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1282
request_1283()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1283 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1283" 
        local tmpout=$TmpDir/request_1283.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1283
request_1284()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1284 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1284" 
        local tmpout=$TmpDir/request_1284.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1284
request_1285()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1285 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1285" 
        local tmpout=$TmpDir/request_1285.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1285
request_1286()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1286 [negative test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1286" 
        local tmpout=$TmpDir/request_1286.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1286
request_1287()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1287 [positive test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1287"  
        local tmpout=$TmpDir/request_1287.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1287 

request_1288()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -P [CertPIN positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1288 [positive test] scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1288"  
        local tmpout=$TmpDir/request_1288.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -P $CertPIN_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -k -f -P -g -r -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1288 

request_1289()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE negative] 
{  
    rlPhaseStartTest "request_1289 [negative test] scenario: [ipa-getcert request -k -f -p]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1289" 
        local tmpout=$TmpDir/request_1289.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1289
request_1290()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE negative] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1290 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1290" 
        local tmpout=$TmpDir/request_1290.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_negative -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1290
request_1291()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE negative] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1291 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1291" 
        local tmpout=$TmpDir/request_1291.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_negative -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1291
request_1292()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE negative] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1292 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1292" 
        local tmpout=$TmpDir/request_1292.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_negative -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1292
request_1293()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE negative] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1293 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1293" 
        local tmpout=$TmpDir/request_1293.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_negative -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1293
request_1294()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE negative] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1294 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1294" 
        local tmpout=$TmpDir/request_1294.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_negative -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1294
request_1295()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE negative] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1295 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1295" 
        local tmpout=$TmpDir/request_1295.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_negative -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1295
request_1296()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE negative] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1296 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1296" 
        local tmpout=$TmpDir/request_1296.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_negative -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1296
request_1297()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE negative] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1297 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [PINFILE negative] used" 
        # test setup 
        local testID="request_1297" 
        local tmpout=$TmpDir/request_1297.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_negative -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1297
request_1298()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] 
{ 
    rlPhaseStartTest "request_1298 [positive test] scenario: [ipa-getcert request -k -f -p]	data: all positive" 
        # test setup 
        local testID="request_1298"  
        local tmpout=$TmpDir/request_1298.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive" 0 "scenario: [ipa-getcert request -k -f -p]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1298 

request_1299()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1299 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1299" 
        local tmpout=$TmpDir/request_1299.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1299
request_1300()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1300 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1300" 
        local tmpout=$TmpDir/request_1300.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1300
request_1301()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1301 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1301" 
        local tmpout=$TmpDir/request_1301.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1301
request_1302()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1302 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="request_1302" 
        local tmpout=$TmpDir/request_1302.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1302
request_1303()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1303 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1303" 
        local tmpout=$TmpDir/request_1303.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1303
request_1304()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1304 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1304" 
        local tmpout=$TmpDir/request_1304.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1304
request_1305()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1305 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1305" 
        local tmpout=$TmpDir/request_1305.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1305
request_1306()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1306 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1306" 
        local tmpout=$TmpDir/request_1306.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1306
request_1307()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1307 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1307" 
        local tmpout=$TmpDir/request_1307.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1307
request_1308()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1308 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1308" 
        local tmpout=$TmpDir/request_1308.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1308
request_1309()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1309 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1309" 
        local tmpout=$TmpDir/request_1309.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1309
request_1310()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1310 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1310" 
        local tmpout=$TmpDir/request_1310.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1310
request_1311()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1311 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1311" 
        local tmpout=$TmpDir/request_1311.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1311
request_1312()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1312 [negative test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1312" 
        local tmpout=$TmpDir/request_1312.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1312
request_1313()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1313 [positive test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1313"  
        local tmpout=$TmpDir/request_1313.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1313 

request_1314()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1314 [positive test] scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1314"  
        local tmpout=$TmpDir/request_1314.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -k -f -p -I -R -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1314 

request_1315()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1315 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1315" 
        local tmpout=$TmpDir/request_1315.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1315
request_1316()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1316 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1316" 
        local tmpout=$TmpDir/request_1316.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1316
request_1317()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1317 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1317" 
        local tmpout=$TmpDir/request_1317.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1317
request_1318()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1318 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1318" 
        local tmpout=$TmpDir/request_1318.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1318
request_1319()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1319 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1319" 
        local tmpout=$TmpDir/request_1319.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1319
request_1320()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1320 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1320" 
        local tmpout=$TmpDir/request_1320.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1320
request_1321()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1321 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1321" 
        local tmpout=$TmpDir/request_1321.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1321
request_1322()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1322 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1322" 
        local tmpout=$TmpDir/request_1322.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1322
request_1323()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1323 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1323" 
        local tmpout=$TmpDir/request_1323.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1323
request_1324()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1324 [negative test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1324" 
        local tmpout=$TmpDir/request_1324.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1324
request_1325()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1325 [positive test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1325"  
        local tmpout=$TmpDir/request_1325.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1325 

request_1326()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -I [CertNickName positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1326 [positive test] scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1326"  
        local tmpout=$TmpDir/request_1326.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -I $CertNickName_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -k -f -p -I -r -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1326 

request_1327()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1327 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1327" 
        local tmpout=$TmpDir/request_1327.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1327
request_1328()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize negative] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1328 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1328" 
        local tmpout=$TmpDir/request_1328.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_negative -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1328
request_1329()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1329 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1329" 
        local tmpout=$TmpDir/request_1329.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1329
request_1330()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize negative] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1330 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used" 
        # test setup 
        local testID="request_1330" 
        local tmpout=$TmpDir/request_1330.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [CertKeySize negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_negative -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1330
request_1331()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1331 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1331" 
        local tmpout=$TmpDir/request_1331.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1331
request_1332()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1332 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1332" 
        local tmpout=$TmpDir/request_1332.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1332
request_1333()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1333 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1333" 
        local tmpout=$TmpDir/request_1333.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1333
request_1334()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1334 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1334" 
        local tmpout=$TmpDir/request_1334.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1334
request_1335()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1335 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1335" 
        local tmpout=$TmpDir/request_1335.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1335
request_1336()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1336 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1336" 
        local tmpout=$TmpDir/request_1336.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1336
request_1337()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1337 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1337" 
        local tmpout=$TmpDir/request_1337.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1337
request_1338()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1338 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1338" 
        local tmpout=$TmpDir/request_1338.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1338
request_1339()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1339 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1339" 
        local tmpout=$TmpDir/request_1339.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1339
request_1340()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1340 [negative test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1340" 
        local tmpout=$TmpDir/request_1340.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1340
request_1341()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1341 [positive test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1341"  
        local tmpout=$TmpDir/request_1341.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1341 

request_1342()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -R -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1342 [positive test] scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1342"  
        local tmpout=$TmpDir/request_1342.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -R -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -k -f -p -g -R -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1342 

request_1343()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1343 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1343" 
        local tmpout=$TmpDir/request_1343.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1343
request_1344()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1344 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="request_1344" 
        local tmpout=$TmpDir/request_1344.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1344
request_1345()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1345 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1345" 
        local tmpout=$TmpDir/request_1345.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1345
request_1346()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1346 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="request_1346" 
        local tmpout=$TmpDir/request_1346.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1346
request_1347()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1347 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1347" 
        local tmpout=$TmpDir/request_1347.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1347
request_1348()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1348 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="request_1348" 
        local tmpout=$TmpDir/request_1348.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1348
request_1349()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -S 
{  
    rlPhaseStartTest "request_1349 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1349" 
        local tmpout=$TmpDir/request_1349.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1349
request_1350()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -s 
{  
    rlPhaseStartTest "request_1350 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="request_1350" 
        local tmpout=$TmpDir/request_1350.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1350
request_1351()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -S 
{  
    rlPhaseStartTest "request_1351 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1351" 
        local tmpout=$TmpDir/request_1351.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1351
request_1352()  #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -s 
{  
    rlPhaseStartTest "request_1352 [negative test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="request_1352" 
        local tmpout=$TmpDir/request_1352.$RANDOM.out 

        # test local variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1352
request_1353()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -S 
{ 
    rlPhaseStartTest "request_1353 [positive test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: all positive" 
        # test setup 
        local testID="request_1353"  
        local tmpout=$TmpDir/request_1353.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -S" 0 "scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1353 

request_1354()   #ipa-getcert request -k [PemKeyFile positive] -f [PemCertFile positive] -p [PINFILE positive] -g [CertKeySize positive] -r -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -s 
{ 
    rlPhaseStartTest "request_1354 [positive test] scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: all positive" 
        # test setup 
        local testID="request_1354"  
        local tmpout=$TmpDir/request_1354.$RANDOM.out 

        # local test variables
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertKeySize_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert request -k $PemKeyFile_positive -f $PemCertFile_positive -p $PINFILE_positive -g $CertKeySize_positive -r -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -s" 0 "scenario: [ipa-getcert request -k -f -p -g -r -N -U -K -D -E -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #request_1354 

start_tracking()
{ #total test cases: 53
    start_tracking_envsetup
    start_tracking_1001	#scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [CertNickName negative] used
    start_tracking_1002	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertNickName negative] used
    start_tracking_1003	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertNickName negative] used
    start_tracking_1004	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertNickName negative] used
    start_tracking_1005	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertNickName negative] used
    start_tracking_1006	#scenario: [ipa-getcert start-tracking -i -k -f]	data: [CertNickName negative] used
    start_tracking_1007	#scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [CertNickName negative] used
    start_tracking_1008	#scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [CertNickName negative] used
    start_tracking_1009	#scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [CertNickName negative] used
    start_tracking_1010	#scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [CertNickName negative] used
    start_tracking_1011	#scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [NSSDBDIR negative] used
    start_tracking_1012	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [NSSDBDIR negative] used
    start_tracking_1013	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [NSSDBDIR negative] used
    start_tracking_1014	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [NSSDBDIR negative] used
    start_tracking_1015	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [NSSDBDIR negative] used
    start_tracking_1016	#scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [CertNickName negative] used
    start_tracking_1017	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertNickName negative] used
    start_tracking_1018	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertNickName negative] used
    start_tracking_1019	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertNickName negative] used
    start_tracking_1020	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertNickName negative] used
    start_tracking_1021	#scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [CertTokenName negative] used
    start_tracking_1022	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertTokenName negative] used
    start_tracking_1023	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertTokenName negative] used
    start_tracking_1024	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertTokenName negative] used
    start_tracking_1025	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertTokenName negative] used
    start_tracking_1026	#scenario: [ipa-getcert start-tracking -i -d -n -t]	data: all positive
    start_tracking_1027	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertNickName negative] used
    start_tracking_1028	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertNickName negative] used
    start_tracking_1029	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertNickName negative] used
    start_tracking_1030	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertNickName negative] used
    start_tracking_1031	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: all positive
    start_tracking_1032	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: all positive
    start_tracking_1033	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: all positive
    start_tracking_1034	#scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: all positive
    start_tracking_1035	#scenario: [ipa-getcert start-tracking -i -k -f]	data: [PemKeyFile negative] used
    start_tracking_1036	#scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [PemKeyFile negative] used
    start_tracking_1037	#scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [PemKeyFile negative] used
    start_tracking_1038	#scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [PemKeyFile negative] used
    start_tracking_1039	#scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [PemKeyFile negative] used
    start_tracking_1040	#scenario: [ipa-getcert start-tracking -i -k -f]	data: [PemCertFile negative] used
    start_tracking_1041	#scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [PemCertFile negative] used
    start_tracking_1042	#scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [PemCertFile negative] used
    start_tracking_1043	#scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [PemCertFile negative] used
    start_tracking_1044	#scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [PemCertFile negative] used
    start_tracking_1045	#scenario: [ipa-getcert start-tracking -i -k -f]	data: all positive
    start_tracking_1046	#scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [CertNickName negative] used
    start_tracking_1047	#scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [CertNickName negative] used
    start_tracking_1048	#scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [CertNickName negative] used
    start_tracking_1049	#scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [CertNickName negative] used
    start_tracking_1050	#scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: all positive
    start_tracking_1051	#scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: all positive
    start_tracking_1052	#scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: all positive
    start_tracking_1053	#scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: all positive
    start_tracking_envcleanup
} #start_tracking
start_tracking_envsetup()
{
    rlPhaseStartSetup "start_tracking_envsetup"
        #environment setup starts here
        #environment setup ends   here
    rlPhaseEnd
} #envsetup
start_tracking_envcleanup()
{
    rlPhaseStartCleanup "start_tracking_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

start_tracking_1001()  #ipa-getcert start-tracking -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] 
{  
    rlPhaseStartTest "start_tracking_1001 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1001" 
        local tmpout=$TmpDir/start_tracking_1001.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1001
start_tracking_1002()  #ipa-getcert start-tracking -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -R -S 
{  
    rlPhaseStartTest "start_tracking_1002 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1002" 
        local tmpout=$TmpDir/start_tracking_1002.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -R -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1002
start_tracking_1003()  #ipa-getcert start-tracking -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -R -s 
{  
    rlPhaseStartTest "start_tracking_1003 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1003" 
        local tmpout=$TmpDir/start_tracking_1003.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -R -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1003
start_tracking_1004()  #ipa-getcert start-tracking -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -r -S 
{  
    rlPhaseStartTest "start_tracking_1004 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1004" 
        local tmpout=$TmpDir/start_tracking_1004.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -r -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1004
start_tracking_1005()  #ipa-getcert start-tracking -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -r -s 
{  
    rlPhaseStartTest "start_tracking_1005 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1005" 
        local tmpout=$TmpDir/start_tracking_1005.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -r -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1005
start_tracking_1006()  #ipa-getcert start-tracking -i [CertNickName negative] -k [PemKeyFile positive] -f [PemCertFile positive] 
{  
    rlPhaseStartTest "start_tracking_1006 [negative test] scenario: [ipa-getcert start-tracking -i -k -f]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1006" 
        local tmpout=$TmpDir/start_tracking_1006.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_negative -k $PemKeyFile_positive -f $PemCertFile_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1006
start_tracking_1007()  #ipa-getcert start-tracking -i [CertNickName negative] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName positive] -R -S 
{  
    rlPhaseStartTest "start_tracking_1007 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1007" 
        local tmpout=$TmpDir/start_tracking_1007.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_negative -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_positive -R -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1007
start_tracking_1008()  #ipa-getcert start-tracking -i [CertNickName negative] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName positive] -R -s 
{  
    rlPhaseStartTest "start_tracking_1008 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1008" 
        local tmpout=$TmpDir/start_tracking_1008.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_negative -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_positive -R -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1008
start_tracking_1009()  #ipa-getcert start-tracking -i [CertNickName negative] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName positive] -r -S 
{  
    rlPhaseStartTest "start_tracking_1009 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1009" 
        local tmpout=$TmpDir/start_tracking_1009.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_negative -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_positive -r -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1009
start_tracking_1010()  #ipa-getcert start-tracking -i [CertNickName negative] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName positive] -r -s 
{  
    rlPhaseStartTest "start_tracking_1010 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1010" 
        local tmpout=$TmpDir/start_tracking_1010.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertNickName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_negative -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_positive -r -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1010
start_tracking_1011()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] 
{  
    rlPhaseStartTest "start_tracking_1011 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="start_tracking_1011" 
        local tmpout=$TmpDir/start_tracking_1011.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1011
start_tracking_1012()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -R -S 
{  
    rlPhaseStartTest "start_tracking_1012 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="start_tracking_1012" 
        local tmpout=$TmpDir/start_tracking_1012.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -R -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1012
start_tracking_1013()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -R -s 
{  
    rlPhaseStartTest "start_tracking_1013 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="start_tracking_1013" 
        local tmpout=$TmpDir/start_tracking_1013.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -R -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1013
start_tracking_1014()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -r -S 
{  
    rlPhaseStartTest "start_tracking_1014 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="start_tracking_1014" 
        local tmpout=$TmpDir/start_tracking_1014.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -r -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1014
start_tracking_1015()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -r -s 
{  
    rlPhaseStartTest "start_tracking_1015 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="start_tracking_1015" 
        local tmpout=$TmpDir/start_tracking_1015.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -r -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1015
start_tracking_1016()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] 
{  
    rlPhaseStartTest "start_tracking_1016 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1016" 
        local tmpout=$TmpDir/start_tracking_1016.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1016
start_tracking_1017()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -I [CertNickName positive] -R -S 
{  
    rlPhaseStartTest "start_tracking_1017 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1017" 
        local tmpout=$TmpDir/start_tracking_1017.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -I $CertNickName_positive -R -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1017
start_tracking_1018()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -I [CertNickName positive] -R -s 
{  
    rlPhaseStartTest "start_tracking_1018 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1018" 
        local tmpout=$TmpDir/start_tracking_1018.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -I $CertNickName_positive -R -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1018
start_tracking_1019()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -I [CertNickName positive] -r -S 
{  
    rlPhaseStartTest "start_tracking_1019 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1019" 
        local tmpout=$TmpDir/start_tracking_1019.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -I $CertNickName_positive -r -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1019
start_tracking_1020()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -I [CertNickName positive] -r -s 
{  
    rlPhaseStartTest "start_tracking_1020 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1020" 
        local tmpout=$TmpDir/start_tracking_1020.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -I $CertNickName_positive -r -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1020
start_tracking_1021()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] 
{  
    rlPhaseStartTest "start_tracking_1021 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="start_tracking_1021" 
        local tmpout=$TmpDir/start_tracking_1021.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1021
start_tracking_1022()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -I [CertNickName positive] -R -S 
{  
    rlPhaseStartTest "start_tracking_1022 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="start_tracking_1022" 
        local tmpout=$TmpDir/start_tracking_1022.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -I $CertNickName_positive -R -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1022
start_tracking_1023()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -I [CertNickName positive] -R -s 
{  
    rlPhaseStartTest "start_tracking_1023 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="start_tracking_1023" 
        local tmpout=$TmpDir/start_tracking_1023.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -I $CertNickName_positive -R -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1023
start_tracking_1024()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -I [CertNickName positive] -r -S 
{  
    rlPhaseStartTest "start_tracking_1024 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="start_tracking_1024" 
        local tmpout=$TmpDir/start_tracking_1024.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -I $CertNickName_positive -r -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1024
start_tracking_1025()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -I [CertNickName positive] -r -s 
{  
    rlPhaseStartTest "start_tracking_1025 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="start_tracking_1025" 
        local tmpout=$TmpDir/start_tracking_1025.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -I $CertNickName_positive -r -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1025
start_tracking_1026()   #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] 
{ 
    rlPhaseStartTest "start_tracking_1026 [positive test] scenario: [ipa-getcert start-tracking -i -d -n -t]	data: all positive" 
        # test setup 
        local testID="start_tracking_1026"  
        local tmpout=$TmpDir/start_tracking_1026.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive" 0 "scenario: [ipa-getcert start-tracking -i -d -n -t]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1026 

start_tracking_1027()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName negative] -R -S 
{  
    rlPhaseStartTest "start_tracking_1027 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1027" 
        local tmpout=$TmpDir/start_tracking_1027.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertNickName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_negative -R -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1027
start_tracking_1028()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName negative] -R -s 
{  
    rlPhaseStartTest "start_tracking_1028 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1028" 
        local tmpout=$TmpDir/start_tracking_1028.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertNickName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_negative -R -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1028
start_tracking_1029()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName negative] -r -S 
{  
    rlPhaseStartTest "start_tracking_1029 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1029" 
        local tmpout=$TmpDir/start_tracking_1029.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertNickName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_negative -r -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1029
start_tracking_1030()  #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName negative] -r -s 
{  
    rlPhaseStartTest "start_tracking_1030 [negative test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1030" 
        local tmpout=$TmpDir/start_tracking_1030.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertNickName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_negative -r -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1030
start_tracking_1031()   #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -R -S 
{ 
    rlPhaseStartTest "start_tracking_1031 [positive test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: all positive" 
        # test setup 
        local testID="start_tracking_1031"  
        local tmpout=$TmpDir/start_tracking_1031.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -R -S" 0 "scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1031 

start_tracking_1032()   #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -R -s 
{ 
    rlPhaseStartTest "start_tracking_1032 [positive test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: all positive" 
        # test setup 
        local testID="start_tracking_1032"  
        local tmpout=$TmpDir/start_tracking_1032.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -R -s" 0 "scenario: [ipa-getcert start-tracking -i -d -n -t -I -R -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1032 

start_tracking_1033()   #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -r -S 
{ 
    rlPhaseStartTest "start_tracking_1033 [positive test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: all positive" 
        # test setup 
        local testID="start_tracking_1033"  
        local tmpout=$TmpDir/start_tracking_1033.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -r -S" 0 "scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1033 

start_tracking_1034()   #ipa-getcert start-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -I [CertNickName positive] -r -s 
{ 
    rlPhaseStartTest "start_tracking_1034 [positive test] scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: all positive" 
        # test setup 
        local testID="start_tracking_1034"  
        local tmpout=$TmpDir/start_tracking_1034.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert start-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -I $CertNickName_positive -r -s" 0 "scenario: [ipa-getcert start-tracking -i -d -n -t -I -r -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1034 

start_tracking_1035()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile negative] -f [PemCertFile positive] 
{  
    rlPhaseStartTest "start_tracking_1035 [negative test] scenario: [ipa-getcert start-tracking -i -k -f]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="start_tracking_1035" 
        local tmpout=$TmpDir/start_tracking_1035.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_negative -f $PemCertFile_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1035
start_tracking_1036()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile negative] -f [PemCertFile positive] -I [CertNickName positive] -R -S 
{  
    rlPhaseStartTest "start_tracking_1036 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="start_tracking_1036" 
        local tmpout=$TmpDir/start_tracking_1036.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_negative -f $PemCertFile_positive -I $CertNickName_positive -R -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1036
start_tracking_1037()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile negative] -f [PemCertFile positive] -I [CertNickName positive] -R -s 
{  
    rlPhaseStartTest "start_tracking_1037 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="start_tracking_1037" 
        local tmpout=$TmpDir/start_tracking_1037.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_negative -f $PemCertFile_positive -I $CertNickName_positive -R -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1037
start_tracking_1038()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile negative] -f [PemCertFile positive] -I [CertNickName positive] -r -S 
{  
    rlPhaseStartTest "start_tracking_1038 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="start_tracking_1038" 
        local tmpout=$TmpDir/start_tracking_1038.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_negative -f $PemCertFile_positive -I $CertNickName_positive -r -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1038
start_tracking_1039()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile negative] -f [PemCertFile positive] -I [CertNickName positive] -r -s 
{  
    rlPhaseStartTest "start_tracking_1039 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="start_tracking_1039" 
        local tmpout=$TmpDir/start_tracking_1039.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_negative -f $PemCertFile_positive -I $CertNickName_positive -r -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1039
start_tracking_1040()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile negative] 
{  
    rlPhaseStartTest "start_tracking_1040 [negative test] scenario: [ipa-getcert start-tracking -i -k -f]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="start_tracking_1040" 
        local tmpout=$TmpDir/start_tracking_1040.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1040
start_tracking_1041()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile negative] -I [CertNickName positive] -R -S 
{  
    rlPhaseStartTest "start_tracking_1041 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="start_tracking_1041" 
        local tmpout=$TmpDir/start_tracking_1041.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_negative -I $CertNickName_positive -R -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1041
start_tracking_1042()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile negative] -I [CertNickName positive] -R -s 
{  
    rlPhaseStartTest "start_tracking_1042 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="start_tracking_1042" 
        local tmpout=$TmpDir/start_tracking_1042.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_negative -I $CertNickName_positive -R -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1042
start_tracking_1043()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile negative] -I [CertNickName positive] -r -S 
{  
    rlPhaseStartTest "start_tracking_1043 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="start_tracking_1043" 
        local tmpout=$TmpDir/start_tracking_1043.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_negative -I $CertNickName_positive -r -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1043
start_tracking_1044()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile negative] -I [CertNickName positive] -r -s 
{  
    rlPhaseStartTest "start_tracking_1044 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="start_tracking_1044" 
        local tmpout=$TmpDir/start_tracking_1044.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_negative -I $CertNickName_positive -r -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1044
start_tracking_1045()   #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] 
{ 
    rlPhaseStartTest "start_tracking_1045 [positive test] scenario: [ipa-getcert start-tracking -i -k -f]	data: all positive" 
        # test setup 
        local testID="start_tracking_1045"  
        local tmpout=$TmpDir/start_tracking_1045.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive" 0 "scenario: [ipa-getcert start-tracking -i -k -f]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1045 

start_tracking_1046()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName negative] -R -S 
{  
    rlPhaseStartTest "start_tracking_1046 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1046" 
        local tmpout=$TmpDir/start_tracking_1046.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_negative -R -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1046
start_tracking_1047()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName negative] -R -s 
{  
    rlPhaseStartTest "start_tracking_1047 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1047" 
        local tmpout=$TmpDir/start_tracking_1047.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_negative -R -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1047
start_tracking_1048()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName negative] -r -S 
{  
    rlPhaseStartTest "start_tracking_1048 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1048" 
        local tmpout=$TmpDir/start_tracking_1048.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_negative -r -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1048
start_tracking_1049()  #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName negative] -r -s 
{  
    rlPhaseStartTest "start_tracking_1049 [negative test] scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="start_tracking_1049" 
        local tmpout=$TmpDir/start_tracking_1049.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertNickName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_negative -r -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1049
start_tracking_1050()   #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName positive] -R -S 
{ 
    rlPhaseStartTest "start_tracking_1050 [positive test] scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: all positive" 
        # test setup 
        local testID="start_tracking_1050"  
        local tmpout=$TmpDir/start_tracking_1050.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_positive -R -S" 0 "scenario: [ipa-getcert start-tracking -i -k -f -I -R -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1050 

start_tracking_1051()   #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName positive] -R -s 
{ 
    rlPhaseStartTest "start_tracking_1051 [positive test] scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: all positive" 
        # test setup 
        local testID="start_tracking_1051"  
        local tmpout=$TmpDir/start_tracking_1051.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_positive -R -s" 0 "scenario: [ipa-getcert start-tracking -i -k -f -I -R -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1051 

start_tracking_1052()   #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName positive] -r -S 
{ 
    rlPhaseStartTest "start_tracking_1052 [positive test] scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: all positive" 
        # test setup 
        local testID="start_tracking_1052"  
        local tmpout=$TmpDir/start_tracking_1052.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_positive -r -S" 0 "scenario: [ipa-getcert start-tracking -i -k -f -I -r -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1052 

start_tracking_1053()   #ipa-getcert start-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] -I [CertNickName positive] -r -s 
{ 
    rlPhaseStartTest "start_tracking_1053 [positive test] scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: all positive" 
        # test setup 
        local testID="start_tracking_1053"  
        local tmpout=$TmpDir/start_tracking_1053.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert start-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive -I $CertNickName_positive -r -s" 0 "scenario: [ipa-getcert start-tracking -i -k -f -I -r -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #start_tracking_1053 

stop_tracking()
{ #total test cases: 27
    stop_tracking_envsetup
    stop_tracking_1001	#scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [CertNickName negative] used
    stop_tracking_1002	#scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [CertNickName negative] used
    stop_tracking_1003	#scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [CertNickName negative] used
    stop_tracking_1004	#scenario: [ipa-getcert stop-tracking -i -k -f]	data: [CertNickName negative] used
    stop_tracking_1005	#scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: [CertNickName negative] used
    stop_tracking_1006	#scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: [CertNickName negative] used
    stop_tracking_1007	#scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [NSSDBDIR negative] used
    stop_tracking_1008	#scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [NSSDBDIR negative] used
    stop_tracking_1009	#scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [NSSDBDIR negative] used
    stop_tracking_1010	#scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [CertNickName negative] used
    stop_tracking_1011	#scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [CertNickName negative] used
    stop_tracking_1012	#scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [CertNickName negative] used
    stop_tracking_1013	#scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [CertTokenName negative] used
    stop_tracking_1014	#scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [CertTokenName negative] used
    stop_tracking_1015	#scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [CertTokenName negative] used
    stop_tracking_1016	#scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: all positive
    stop_tracking_1017	#scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: all positive
    stop_tracking_1018	#scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: all positive
    stop_tracking_1019	#scenario: [ipa-getcert stop-tracking -i -k -f]	data: [PemKeyFile negative] used
    stop_tracking_1020	#scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: [PemKeyFile negative] used
    stop_tracking_1021	#scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: [PemKeyFile negative] used
    stop_tracking_1022	#scenario: [ipa-getcert stop-tracking -i -k -f]	data: [PemCertFile negative] used
    stop_tracking_1023	#scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: [PemCertFile negative] used
    stop_tracking_1024	#scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: [PemCertFile negative] used
    stop_tracking_1025	#scenario: [ipa-getcert stop-tracking -i -k -f]	data: all positive
    stop_tracking_1026	#scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: all positive
    stop_tracking_1027	#scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: all positive
    stop_tracking_envcleanup
} #stop_tracking
stop_tracking_envsetup()
{
    rlPhaseStartSetup "stop_tracking_envsetup"
        #environment setup starts here
        #environment setup ends   here
    rlPhaseEnd
} #envsetup
stop_tracking_envcleanup()
{
    rlPhaseStartCleanup "stop_tracking_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

stop_tracking_1001()  #ipa-getcert stop-tracking -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] 
{  
    rlPhaseStartTest "stop_tracking_1001 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [CertNickName negative] used" 
        # test setup 
        local testID="stop_tracking_1001" 
        local tmpout=$TmpDir/stop_tracking_1001.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1001
stop_tracking_1002()  #ipa-getcert stop-tracking -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -S 
{  
    rlPhaseStartTest "stop_tracking_1002 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="stop_tracking_1002" 
        local tmpout=$TmpDir/stop_tracking_1002.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1002
stop_tracking_1003()  #ipa-getcert stop-tracking -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -s 
{  
    rlPhaseStartTest "stop_tracking_1003 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="stop_tracking_1003" 
        local tmpout=$TmpDir/stop_tracking_1003.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1003
stop_tracking_1004()  #ipa-getcert stop-tracking -i [CertNickName negative] -k [PemKeyFile positive] -f [PemCertFile positive] 
{  
    rlPhaseStartTest "stop_tracking_1004 [negative test] scenario: [ipa-getcert stop-tracking -i -k -f]	data: [CertNickName negative] used" 
        # test setup 
        local testID="stop_tracking_1004" 
        local tmpout=$TmpDir/stop_tracking_1004.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -k -f]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_negative -k $PemKeyFile_positive -f $PemCertFile_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1004
stop_tracking_1005()  #ipa-getcert stop-tracking -i [CertNickName negative] -k [PemKeyFile positive] -f [PemCertFile positive] -S 
{  
    rlPhaseStartTest "stop_tracking_1005 [negative test] scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="stop_tracking_1005" 
        local tmpout=$TmpDir/stop_tracking_1005.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_negative -k $PemKeyFile_positive -f $PemCertFile_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1005
stop_tracking_1006()  #ipa-getcert stop-tracking -i [CertNickName negative] -k [PemKeyFile positive] -f [PemCertFile positive] -s 
{  
    rlPhaseStartTest "stop_tracking_1006 [negative test] scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="stop_tracking_1006" 
        local tmpout=$TmpDir/stop_tracking_1006.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_negative -k $PemKeyFile_positive -f $PemCertFile_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1006
stop_tracking_1007()  #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] 
{  
    rlPhaseStartTest "stop_tracking_1007 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="stop_tracking_1007" 
        local tmpout=$TmpDir/stop_tracking_1007.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1007
stop_tracking_1008()  #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -S 
{  
    rlPhaseStartTest "stop_tracking_1008 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="stop_tracking_1008" 
        local tmpout=$TmpDir/stop_tracking_1008.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1008
stop_tracking_1009()  #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -s 
{  
    rlPhaseStartTest "stop_tracking_1009 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="stop_tracking_1009" 
        local tmpout=$TmpDir/stop_tracking_1009.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1009
stop_tracking_1010()  #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] 
{  
    rlPhaseStartTest "stop_tracking_1010 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [CertNickName negative] used" 
        # test setup 
        local testID="stop_tracking_1010" 
        local tmpout=$TmpDir/stop_tracking_1010.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1010
stop_tracking_1011()  #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -S 
{  
    rlPhaseStartTest "stop_tracking_1011 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="stop_tracking_1011" 
        local tmpout=$TmpDir/stop_tracking_1011.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1011
stop_tracking_1012()  #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -s 
{  
    rlPhaseStartTest "stop_tracking_1012 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="stop_tracking_1012" 
        local tmpout=$TmpDir/stop_tracking_1012.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1012
stop_tracking_1013()  #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] 
{  
    rlPhaseStartTest "stop_tracking_1013 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="stop_tracking_1013" 
        local tmpout=$TmpDir/stop_tracking_1013.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1013
stop_tracking_1014()  #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -S 
{  
    rlPhaseStartTest "stop_tracking_1014 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="stop_tracking_1014" 
        local tmpout=$TmpDir/stop_tracking_1014.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1014
stop_tracking_1015()  #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -s 
{  
    rlPhaseStartTest "stop_tracking_1015 [negative test] scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="stop_tracking_1015" 
        local tmpout=$TmpDir/stop_tracking_1015.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1015
stop_tracking_1016()   #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] 
{ 
    rlPhaseStartTest "stop_tracking_1016 [positive test] scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: all positive" 
        # test setup 
        local testID="stop_tracking_1016"  
        local tmpout=$TmpDir/stop_tracking_1016.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive" 0 "scenario: [ipa-getcert stop-tracking -i -d -n -t]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1016 

stop_tracking_1017()   #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -S 
{ 
    rlPhaseStartTest "stop_tracking_1017 [positive test] scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: all positive" 
        # test setup 
        local testID="stop_tracking_1017"  
        local tmpout=$TmpDir/stop_tracking_1017.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -S" 0 "scenario: [ipa-getcert stop-tracking -i -d -n -t -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1017 

stop_tracking_1018()   #ipa-getcert stop-tracking -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -s 
{ 
    rlPhaseStartTest "stop_tracking_1018 [positive test] scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: all positive" 
        # test setup 
        local testID="stop_tracking_1018"  
        local tmpout=$TmpDir/stop_tracking_1018.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert stop-tracking -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -s" 0 "scenario: [ipa-getcert stop-tracking -i -d -n -t -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1018 

stop_tracking_1019()  #ipa-getcert stop-tracking -i [CertNickName positive] -k [PemKeyFile negative] -f [PemCertFile positive] 
{  
    rlPhaseStartTest "stop_tracking_1019 [negative test] scenario: [ipa-getcert stop-tracking -i -k -f]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="stop_tracking_1019" 
        local tmpout=$TmpDir/stop_tracking_1019.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -k -f]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -k $PemKeyFile_negative -f $PemCertFile_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1019
stop_tracking_1020()  #ipa-getcert stop-tracking -i [CertNickName positive] -k [PemKeyFile negative] -f [PemCertFile positive] -S 
{  
    rlPhaseStartTest "stop_tracking_1020 [negative test] scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="stop_tracking_1020" 
        local tmpout=$TmpDir/stop_tracking_1020.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -k $PemKeyFile_negative -f $PemCertFile_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1020
stop_tracking_1021()  #ipa-getcert stop-tracking -i [CertNickName positive] -k [PemKeyFile negative] -f [PemCertFile positive] -s 
{  
    rlPhaseStartTest "stop_tracking_1021 [negative test] scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: [PemKeyFile negative] used" 
        # test setup 
        local testID="stop_tracking_1021" 
        local tmpout=$TmpDir/stop_tracking_1021.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_negative="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: [PemKeyFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -k $PemKeyFile_negative -f $PemCertFile_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1021
stop_tracking_1022()  #ipa-getcert stop-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile negative] 
{  
    rlPhaseStartTest "stop_tracking_1022 [negative test] scenario: [ipa-getcert stop-tracking -i -k -f]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="stop_tracking_1022" 
        local tmpout=$TmpDir/stop_tracking_1022.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -k -f]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1022
stop_tracking_1023()  #ipa-getcert stop-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile negative] -S 
{  
    rlPhaseStartTest "stop_tracking_1023 [negative test] scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="stop_tracking_1023" 
        local tmpout=$TmpDir/stop_tracking_1023.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1023
stop_tracking_1024()  #ipa-getcert stop-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile negative] -s 
{  
    rlPhaseStartTest "stop_tracking_1024 [negative test] scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="stop_tracking_1024" 
        local tmpout=$TmpDir/stop_tracking_1024.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_negative="__NOTFOUNDINDB__"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert stop-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1024
stop_tracking_1025()   #ipa-getcert stop-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] 
{ 
    rlPhaseStartTest "stop_tracking_1025 [positive test] scenario: [ipa-getcert stop-tracking -i -k -f]	data: all positive" 
        # test setup 
        local testID="stop_tracking_1025"  
        local tmpout=$TmpDir/stop_tracking_1025.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert stop-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive" 0 "scenario: [ipa-getcert stop-tracking -i -k -f]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1025 

stop_tracking_1026()   #ipa-getcert stop-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] -S 
{ 
    rlPhaseStartTest "stop_tracking_1026 [positive test] scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: all positive" 
        # test setup 
        local testID="stop_tracking_1026"  
        local tmpout=$TmpDir/stop_tracking_1026.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert stop-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive -S" 0 "scenario: [ipa-getcert stop-tracking -i -k -f -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1026 

stop_tracking_1027()   #ipa-getcert stop-tracking -i [CertNickName positive] -k [PemKeyFile positive] -f [PemCertFile positive] -s 
{ 
    rlPhaseStartTest "stop_tracking_1027 [positive test] scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: all positive" 
        # test setup 
        local testID="stop_tracking_1027"  
        local tmpout=$TmpDir/stop_tracking_1027.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemKeyFile_positive="__NOTFOUNDINDB__"
        local PemCertFile_positive="__NOTFOUNDINDB__"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert stop-tracking -i $CertNickName_positive -k $PemKeyFile_positive -f $PemCertFile_positive -s" 0 "scenario: [ipa-getcert stop-tracking -i -k -f -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #stop_tracking_1027 

resubmit()
{ #total test cases: 128
    resubmit_envsetup
    resubmit_1001	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertNickName negative] used
    resubmit_1002	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertNickName negative] used
    resubmit_1003	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertNickName negative] used
    resubmit_1004	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertNickName negative] used
    resubmit_1005	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertNickName negative] used
    resubmit_1006	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertNickName negative] used
    resubmit_1007	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertNickName negative] used
    resubmit_1008	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertNickName negative] used
    resubmit_1009	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertNickName negative] used
    resubmit_1010	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [CertNickName negative] used
    resubmit_1011	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [CertNickName negative] used
    resubmit_1012	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [CertNickName negative] used
    resubmit_1013	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [NSSDBDIR negative] used
    resubmit_1014	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [NSSDBDIR negative] used
    resubmit_1015	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [NSSDBDIR negative] used
    resubmit_1016	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [NSSDBDIR negative] used
    resubmit_1017	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [NSSDBDIR negative] used
    resubmit_1018	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [NSSDBDIR negative] used
    resubmit_1019	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertNickName negative] used
    resubmit_1020	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertNickName negative] used
    resubmit_1021	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertNickName negative] used
    resubmit_1022	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertNickName negative] used
    resubmit_1023	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertNickName negative] used
    resubmit_1024	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertNickName negative] used
    resubmit_1025	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertTokenName negative] used
    resubmit_1026	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertTokenName negative] used
    resubmit_1027	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertTokenName negative] used
    resubmit_1028	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertTokenName negative] used
    resubmit_1029	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertTokenName negative] used
    resubmit_1030	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertTokenName negative] used
    resubmit_1031	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertPIN negative] used
    resubmit_1032	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertPIN negative] used
    resubmit_1033	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertPIN negative] used
    resubmit_1034	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertSubjectName negative] used
    resubmit_1035	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used
    resubmit_1036	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used
    resubmit_1037	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [EXTUSAGE negative] used
    resubmit_1038	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used
    resubmit_1039	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used
    resubmit_1040	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertPrincipalName negative] used
    resubmit_1041	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used
    resubmit_1042	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used
    resubmit_1043	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [DNSName negative] used
    resubmit_1044	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [DNSName negative] used
    resubmit_1045	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [DNSName negative] used
    resubmit_1046	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [EMAIL negative] used
    resubmit_1047	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [EMAIL negative] used
    resubmit_1048	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [EMAIL negative] used
    resubmit_1049	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: all positive
    resubmit_1050	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used
    resubmit_1051	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used
    resubmit_1052	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: all positive
    resubmit_1053	#scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: all positive
    resubmit_1054	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [PINFILE negative] used
    resubmit_1055	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [PINFILE negative] used
    resubmit_1056	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [PINFILE negative] used
    resubmit_1057	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertSubjectName negative] used
    resubmit_1058	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used
    resubmit_1059	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used
    resubmit_1060	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [EXTUSAGE negative] used
    resubmit_1061	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used
    resubmit_1062	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used
    resubmit_1063	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertPrincipalName negative] used
    resubmit_1064	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used
    resubmit_1065	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used
    resubmit_1066	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [DNSName negative] used
    resubmit_1067	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [DNSName negative] used
    resubmit_1068	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [DNSName negative] used
    resubmit_1069	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [EMAIL negative] used
    resubmit_1070	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [EMAIL negative] used
    resubmit_1071	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [EMAIL negative] used
    resubmit_1072	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: all positive
    resubmit_1073	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used
    resubmit_1074	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used
    resubmit_1075	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: all positive
    resubmit_1076	#scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: all positive
    resubmit_1077	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [PemCertFile negative] used
    resubmit_1078	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [PemCertFile negative] used
    resubmit_1079	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [PemCertFile negative] used
    resubmit_1080	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [PemCertFile negative] used
    resubmit_1081	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [PemCertFile negative] used
    resubmit_1082	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [PemCertFile negative] used
    resubmit_1083	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertPIN negative] used
    resubmit_1084	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertPIN negative] used
    resubmit_1085	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertPIN negative] used
    resubmit_1086	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertSubjectName negative] used
    resubmit_1087	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used
    resubmit_1088	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used
    resubmit_1089	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [EXTUSAGE negative] used
    resubmit_1090	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used
    resubmit_1091	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used
    resubmit_1092	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertPrincipalName negative] used
    resubmit_1093	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used
    resubmit_1094	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used
    resubmit_1095	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [DNSName negative] used
    resubmit_1096	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [DNSName negative] used
    resubmit_1097	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [DNSName negative] used
    resubmit_1098	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [EMAIL negative] used
    resubmit_1099	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [EMAIL negative] used
    resubmit_1100	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [EMAIL negative] used
    resubmit_1101	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: all positive
    resubmit_1102	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used
    resubmit_1103	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used
    resubmit_1104	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: all positive
    resubmit_1105	#scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: all positive
    resubmit_1106	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [PINFILE negative] used
    resubmit_1107	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [PINFILE negative] used
    resubmit_1108	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [PINFILE negative] used
    resubmit_1109	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [CertSubjectName negative] used
    resubmit_1110	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used
    resubmit_1111	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used
    resubmit_1112	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [EXTUSAGE negative] used
    resubmit_1113	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used
    resubmit_1114	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used
    resubmit_1115	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [CertPrincipalName negative] used
    resubmit_1116	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used
    resubmit_1117	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used
    resubmit_1118	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [DNSName negative] used
    resubmit_1119	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [DNSName negative] used
    resubmit_1120	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [DNSName negative] used
    resubmit_1121	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [EMAIL negative] used
    resubmit_1122	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [EMAIL negative] used
    resubmit_1123	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [EMAIL negative] used
    resubmit_1124	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: all positive
    resubmit_1125	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used
    resubmit_1126	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used
    resubmit_1127	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: all positive
    resubmit_1128	#scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: all positive
    resubmit_envcleanup
} #resubmit
resubmit_envsetup()
{
    rlPhaseStartSetup "resubmit_envsetup"
        #environment setup starts here
        #environment setup ends   here
    rlPhaseEnd
} #envsetup
resubmit_envcleanup()
{
    rlPhaseStartCleanup "resubmit_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

resubmit_1001()  #ipa-getcert resubmit -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1001 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1001" 
        local tmpout=$TmpDir/resubmit_1001.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1001
resubmit_1002()  #ipa-getcert resubmit -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1002 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1002" 
        local tmpout=$TmpDir/resubmit_1002.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1002
resubmit_1003()  #ipa-getcert resubmit -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1003 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1003" 
        local tmpout=$TmpDir/resubmit_1003.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1003
resubmit_1004()  #ipa-getcert resubmit -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1004 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1004" 
        local tmpout=$TmpDir/resubmit_1004.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1004
resubmit_1005()  #ipa-getcert resubmit -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1005 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1005" 
        local tmpout=$TmpDir/resubmit_1005.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1005
resubmit_1006()  #ipa-getcert resubmit -i [CertNickName negative] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1006 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1006" 
        local tmpout=$TmpDir/resubmit_1006.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local NSSDBDIR_positive="."
        local CertNickName_positive="TestCert-Name"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1006
resubmit_1007()  #ipa-getcert resubmit -i [CertNickName negative] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1007 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1007" 
        local tmpout=$TmpDir/resubmit_1007.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1007
resubmit_1008()  #ipa-getcert resubmit -i [CertNickName negative] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1008 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1008" 
        local tmpout=$TmpDir/resubmit_1008.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1008
resubmit_1009()  #ipa-getcert resubmit -i [CertNickName negative] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1009 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1009" 
        local tmpout=$TmpDir/resubmit_1009.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1009
resubmit_1010()  #ipa-getcert resubmit -i [CertNickName negative] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1010 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1010" 
        local tmpout=$TmpDir/resubmit_1010.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1010
resubmit_1011()  #ipa-getcert resubmit -i [CertNickName negative] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1011 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1011" 
        local tmpout=$TmpDir/resubmit_1011.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1011
resubmit_1012()  #ipa-getcert resubmit -i [CertNickName negative] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1012 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1012" 
        local tmpout=$TmpDir/resubmit_1012.$RANDOM.out 

        # test local variables
        local CertNickName_negative=""
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_negative -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1012
resubmit_1013()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1013 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="resubmit_1013" 
        local tmpout=$TmpDir/resubmit_1013.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1013
resubmit_1014()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1014 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="resubmit_1014" 
        local tmpout=$TmpDir/resubmit_1014.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1014
resubmit_1015()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1015 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="resubmit_1015" 
        local tmpout=$TmpDir/resubmit_1015.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1015
resubmit_1016()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1016 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="resubmit_1016" 
        local tmpout=$TmpDir/resubmit_1016.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1016
resubmit_1017()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1017 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="resubmit_1017" 
        local tmpout=$TmpDir/resubmit_1017.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1017
resubmit_1018()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR negative] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1018 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [NSSDBDIR negative] used" 
        # test setup 
        local testID="resubmit_1018" 
        local tmpout=$TmpDir/resubmit_1018.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_negative="/etc/pki/nssdb/cert8.db"
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="The location \"$NSSDBDIR_negative\" must be a directory"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [NSSDBDIR negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_negative -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1018
resubmit_1019()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1019 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1019" 
        local tmpout=$TmpDir/resubmit_1019.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1019
resubmit_1020()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1020 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1020" 
        local tmpout=$TmpDir/resubmit_1020.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1020
resubmit_1021()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1021 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1021" 
        local tmpout=$TmpDir/resubmit_1021.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1021
resubmit_1022()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1022 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1022" 
        local tmpout=$TmpDir/resubmit_1022.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1022
resubmit_1023()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1023 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1023" 
        local tmpout=$TmpDir/resubmit_1023.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1023
resubmit_1024()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName negative] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1024 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 
        # test setup 
        local testID="resubmit_1024" 
        local tmpout=$TmpDir/resubmit_1024.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertNickName_negative=""
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertNickName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_negative -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1024
resubmit_1025()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1025 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="resubmit_1025" 
        local tmpout=$TmpDir/resubmit_1025.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1025
resubmit_1026()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1026 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="resubmit_1026" 
        local tmpout=$TmpDir/resubmit_1026.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1026
resubmit_1027()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1027 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="resubmit_1027" 
        local tmpout=$TmpDir/resubmit_1027.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1027
resubmit_1028()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1028 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="resubmit_1028" 
        local tmpout=$TmpDir/resubmit_1028.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1028
resubmit_1029()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1029 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="resubmit_1029" 
        local tmpout=$TmpDir/resubmit_1029.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1029
resubmit_1030()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName negative] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1030 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertTokenName negative] used" 
        # test setup 
        local testID="resubmit_1030" 
        local tmpout=$TmpDir/resubmit_1030.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_negative=""
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertTokenName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_negative -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1030
resubmit_1031()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1031 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertPIN negative] used" 
        # test setup 
        local testID="resubmit_1031" 
        local tmpout=$TmpDir/resubmit_1031.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1031
resubmit_1032()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1032 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertPIN negative] used" 
        # test setup 
        local testID="resubmit_1032" 
        local tmpout=$TmpDir/resubmit_1032.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1032
resubmit_1033()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1033 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertPIN negative] used" 
        # test setup 
        local testID="resubmit_1033" 
        local tmpout=$TmpDir/resubmit_1033.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1033
resubmit_1034()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1034 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1034" 
        local tmpout=$TmpDir/resubmit_1034.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1034
resubmit_1035()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1035 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1035" 
        local tmpout=$TmpDir/resubmit_1035.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1035
resubmit_1036()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1036 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1036" 
        local tmpout=$TmpDir/resubmit_1036.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1036
resubmit_1037()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1037 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1037" 
        local tmpout=$TmpDir/resubmit_1037.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1037
resubmit_1038()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1038 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1038" 
        local tmpout=$TmpDir/resubmit_1038.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1038
resubmit_1039()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1039 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1039" 
        local tmpout=$TmpDir/resubmit_1039.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1039
resubmit_1040()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1040 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1040" 
        local tmpout=$TmpDir/resubmit_1040.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1040
resubmit_1041()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1041 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1041" 
        local tmpout=$TmpDir/resubmit_1041.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1041
resubmit_1042()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1042 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1042" 
        local tmpout=$TmpDir/resubmit_1042.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1042
resubmit_1043()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1043 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1043" 
        local tmpout=$TmpDir/resubmit_1043.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1043
resubmit_1044()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1044 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1044" 
        local tmpout=$TmpDir/resubmit_1044.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1044
resubmit_1045()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1045 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1045" 
        local tmpout=$TmpDir/resubmit_1045.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1045
resubmit_1046()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] 
{  
    rlPhaseStartTest "resubmit_1046 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1046" 
        local tmpout=$TmpDir/resubmit_1046.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1046
resubmit_1047()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1047 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1047" 
        local tmpout=$TmpDir/resubmit_1047.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1047
resubmit_1048()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1048 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1048" 
        local tmpout=$TmpDir/resubmit_1048.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1048
resubmit_1049()   #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{ 
    rlPhaseStartTest "resubmit_1049 [positive test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: all positive" 
        # test setup 
        local testID="resubmit_1049"  
        local tmpout=$TmpDir/resubmit_1049.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" 0 "scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1049 

resubmit_1050()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE negative] -S 
{  
    rlPhaseStartTest "resubmit_1050 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1050" 
        local tmpout=$TmpDir/resubmit_1050.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1050
resubmit_1051()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE negative] -s 
{  
    rlPhaseStartTest "resubmit_1051 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1051" 
        local tmpout=$TmpDir/resubmit_1051.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1051
resubmit_1052()   #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{ 
    rlPhaseStartTest "resubmit_1052 [positive test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: all positive" 
        # test setup 
        local testID="resubmit_1052"  
        local tmpout=$TmpDir/resubmit_1052.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" 0 "scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1052 

resubmit_1053()   #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{ 
    rlPhaseStartTest "resubmit_1053 [positive test] scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: all positive" 
        # test setup 
        local testID="resubmit_1053"  
        local tmpout=$TmpDir/resubmit_1053.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" 0 "scenario: [ipa-getcert resubmit -i -d -n -t -P -N -U -K -D -E -I -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1053 

resubmit_1054()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1054 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [PINFILE negative] used" 
        # test setup 
        local testID="resubmit_1054" 
        local tmpout=$TmpDir/resubmit_1054.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1054
resubmit_1055()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1055 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [PINFILE negative] used" 
        # test setup 
        local testID="resubmit_1055" 
        local tmpout=$TmpDir/resubmit_1055.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1055
resubmit_1056()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1056 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [PINFILE negative] used" 
        # test setup 
        local testID="resubmit_1056" 
        local tmpout=$TmpDir/resubmit_1056.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1056
resubmit_1057()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1057 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1057" 
        local tmpout=$TmpDir/resubmit_1057.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1057
resubmit_1058()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1058 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1058" 
        local tmpout=$TmpDir/resubmit_1058.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1058
resubmit_1059()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1059 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1059" 
        local tmpout=$TmpDir/resubmit_1059.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1059
resubmit_1060()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1060 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1060" 
        local tmpout=$TmpDir/resubmit_1060.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1060
resubmit_1061()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1061 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1061" 
        local tmpout=$TmpDir/resubmit_1061.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1061
resubmit_1062()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1062 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1062" 
        local tmpout=$TmpDir/resubmit_1062.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1062
resubmit_1063()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1063 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1063" 
        local tmpout=$TmpDir/resubmit_1063.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1063
resubmit_1064()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1064 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1064" 
        local tmpout=$TmpDir/resubmit_1064.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1064
resubmit_1065()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1065 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1065" 
        local tmpout=$TmpDir/resubmit_1065.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1065
resubmit_1066()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1066 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1066" 
        local tmpout=$TmpDir/resubmit_1066.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1066
resubmit_1067()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1067 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1067" 
        local tmpout=$TmpDir/resubmit_1067.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1067
resubmit_1068()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1068 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1068" 
        local tmpout=$TmpDir/resubmit_1068.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1068
resubmit_1069()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] 
{  
    rlPhaseStartTest "resubmit_1069 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1069" 
        local tmpout=$TmpDir/resubmit_1069.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1069
resubmit_1070()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1070 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1070" 
        local tmpout=$TmpDir/resubmit_1070.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1070
resubmit_1071()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1071 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1071" 
        local tmpout=$TmpDir/resubmit_1071.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1071
resubmit_1072()   #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{ 
    rlPhaseStartTest "resubmit_1072 [positive test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: all positive" 
        # test setup 
        local testID="resubmit_1072"  
        local tmpout=$TmpDir/resubmit_1072.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" 0 "scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1072 

resubmit_1073()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE negative] -S 
{  
    rlPhaseStartTest "resubmit_1073 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1073" 
        local tmpout=$TmpDir/resubmit_1073.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1073
resubmit_1074()  #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE negative] -s 
{  
    rlPhaseStartTest "resubmit_1074 [negative test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1074" 
        local tmpout=$TmpDir/resubmit_1074.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1074
resubmit_1075()   #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{ 
    rlPhaseStartTest "resubmit_1075 [positive test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: all positive" 
        # test setup 
        local testID="resubmit_1075"  
        local tmpout=$TmpDir/resubmit_1075.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" 0 "scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1075 

resubmit_1076()   #ipa-getcert resubmit -i [CertNickName positive] -d [NSSDBDIR positive] -n [CertNickName positive] -t [CertTokenName positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{ 
    rlPhaseStartTest "resubmit_1076 [positive test] scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: all positive" 
        # test setup 
        local testID="resubmit_1076"  
        local tmpout=$TmpDir/resubmit_1076.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local NSSDBDIR_positive="."
        local CertTokenName_positive="TestCert-Name"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -d $NSSDBDIR_positive -n $CertNickName_positive -t $CertTokenName_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" 0 "scenario: [ipa-getcert resubmit -i -d -n -t -p -N -U -K -D -E -I -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1076 

resubmit_1077()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile negative] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1077 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="resubmit_1077" 
        local tmpout=$TmpDir/resubmit_1077.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_negative -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1077
resubmit_1078()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile negative] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1078 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="resubmit_1078" 
        local tmpout=$TmpDir/resubmit_1078.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_negative -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1078
resubmit_1079()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile negative] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1079 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="resubmit_1079" 
        local tmpout=$TmpDir/resubmit_1079.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_negative -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1079
resubmit_1080()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile negative] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1080 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="resubmit_1080" 
        local tmpout=$TmpDir/resubmit_1080.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_negative -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1080
resubmit_1081()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile negative] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1081 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="resubmit_1081" 
        local tmpout=$TmpDir/resubmit_1081.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_negative -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1081
resubmit_1082()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile negative] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1082 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [PemCertFile negative] used" 
        # test setup 
        local testID="resubmit_1082" 
        local tmpout=$TmpDir/resubmit_1082.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_negative="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [PemCertFile negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_negative -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1082
resubmit_1083()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1083 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertPIN negative] used" 
        # test setup 
        local testID="resubmit_1083" 
        local tmpout=$TmpDir/resubmit_1083.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1083
resubmit_1084()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1084 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertPIN negative] used" 
        # test setup 
        local testID="resubmit_1084" 
        local tmpout=$TmpDir/resubmit_1084.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1084
resubmit_1085()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1085 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertPIN negative] used" 
        # test setup 
        local testID="resubmit_1085" 
        local tmpout=$TmpDir/resubmit_1085.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertPIN negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1085
resubmit_1086()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1086 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1086" 
        local tmpout=$TmpDir/resubmit_1086.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1086
resubmit_1087()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1087 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1087" 
        local tmpout=$TmpDir/resubmit_1087.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1087
resubmit_1088()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1088 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1088" 
        local tmpout=$TmpDir/resubmit_1088.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1088
resubmit_1089()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1089 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1089" 
        local tmpout=$TmpDir/resubmit_1089.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1089
resubmit_1090()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1090 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1090" 
        local tmpout=$TmpDir/resubmit_1090.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1090
resubmit_1091()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1091 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1091" 
        local tmpout=$TmpDir/resubmit_1091.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1091
resubmit_1092()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1092 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1092" 
        local tmpout=$TmpDir/resubmit_1092.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1092
resubmit_1093()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1093 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1093" 
        local tmpout=$TmpDir/resubmit_1093.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1093
resubmit_1094()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1094 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1094" 
        local tmpout=$TmpDir/resubmit_1094.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1094
resubmit_1095()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1095 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1095" 
        local tmpout=$TmpDir/resubmit_1095.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1095
resubmit_1096()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1096 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1096" 
        local tmpout=$TmpDir/resubmit_1096.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1096
resubmit_1097()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1097 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1097" 
        local tmpout=$TmpDir/resubmit_1097.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1097
resubmit_1098()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] 
{  
    rlPhaseStartTest "resubmit_1098 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1098" 
        local tmpout=$TmpDir/resubmit_1098.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1098
resubmit_1099()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1099 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1099" 
        local tmpout=$TmpDir/resubmit_1099.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1099
resubmit_1100()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1100 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1100" 
        local tmpout=$TmpDir/resubmit_1100.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1100
resubmit_1101()   #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{ 
    rlPhaseStartTest "resubmit_1101 [positive test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: all positive" 
        # test setup 
        local testID="resubmit_1101"  
        local tmpout=$TmpDir/resubmit_1101.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" 0 "scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1101 

resubmit_1102()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE negative] -S 
{  
    rlPhaseStartTest "resubmit_1102 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1102" 
        local tmpout=$TmpDir/resubmit_1102.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1102
resubmit_1103()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE negative] -s 
{  
    rlPhaseStartTest "resubmit_1103 [negative test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1103" 
        local tmpout=$TmpDir/resubmit_1103.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1103
resubmit_1104()   #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{ 
    rlPhaseStartTest "resubmit_1104 [positive test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: all positive" 
        # test setup 
        local testID="resubmit_1104"  
        local tmpout=$TmpDir/resubmit_1104.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" 0 "scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1104 

resubmit_1105()   #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -P [CertPIN positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{ 
    rlPhaseStartTest "resubmit_1105 [positive test] scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: all positive" 
        # test setup 
        local testID="resubmit_1105"  
        local tmpout=$TmpDir/resubmit_1105.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local CertPIN_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -P $CertPIN_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" 0 "scenario: [ipa-getcert resubmit -i -f -P -N -U -K -D -E -I -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1105 

resubmit_1106()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1106 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [PINFILE negative] used" 
        # test setup 
        local testID="resubmit_1106" 
        local tmpout=$TmpDir/resubmit_1106.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1106
resubmit_1107()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1107 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [PINFILE negative] used" 
        # test setup 
        local testID="resubmit_1107" 
        local tmpout=$TmpDir/resubmit_1107.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1107
resubmit_1108()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE negative] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1108 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [PINFILE negative] used" 
        # test setup 
        local testID="resubmit_1108" 
        local tmpout=$TmpDir/resubmit_1108.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_negative="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [PINFILE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_negative -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1108
resubmit_1109()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1109 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1109" 
        local tmpout=$TmpDir/resubmit_1109.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1109
resubmit_1110()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1110 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1110" 
        local tmpout=$TmpDir/resubmit_1110.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1110
resubmit_1111()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName negative] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1111 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used" 
        # test setup 
        local testID="resubmit_1111" 
        local tmpout=$TmpDir/resubmit_1111.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_negative="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [CertSubjectName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_negative -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1111
resubmit_1112()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1112 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1112" 
        local tmpout=$TmpDir/resubmit_1112.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1112
resubmit_1113()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1113 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1113" 
        local tmpout=$TmpDir/resubmit_1113.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1113
resubmit_1114()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE negative] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1114 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1114" 
        local tmpout=$TmpDir/resubmit_1114.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_negative -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1114
resubmit_1115()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1115 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1115" 
        local tmpout=$TmpDir/resubmit_1115.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1115
resubmit_1116()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1116 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1116" 
        local tmpout=$TmpDir/resubmit_1116.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1116
resubmit_1117()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName negative] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1117 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used" 
        # test setup 
        local testID="resubmit_1117" 
        local tmpout=$TmpDir/resubmit_1117.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_negative="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [CertPrincipalName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_negative -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1117
resubmit_1118()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] 
{  
    rlPhaseStartTest "resubmit_1118 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1118" 
        local tmpout=$TmpDir/resubmit_1118.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1118
resubmit_1119()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1119 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1119" 
        local tmpout=$TmpDir/resubmit_1119.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1119
resubmit_1120()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName negative] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1120 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [DNSName negative] used" 
        # test setup 
        local testID="resubmit_1120" 
        local tmpout=$TmpDir/resubmit_1120.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_negative="invalidName"
        local EMAIL_positive="testqa@redhat.com"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [DNSName negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_negative -E $EMAIL_positive -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1120
resubmit_1121()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] 
{  
    rlPhaseStartTest "resubmit_1121 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1121" 
        local tmpout=$TmpDir/resubmit_1121.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1121
resubmit_1122()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -U [EXTUSAGE positive] -S 
{  
    rlPhaseStartTest "resubmit_1122 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1122" 
        local tmpout=$TmpDir/resubmit_1122.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -U $EXTUSAGE_positive -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1122
resubmit_1123()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL negative] -U [EXTUSAGE positive] -s 
{  
    rlPhaseStartTest "resubmit_1123 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [EMAIL negative] used" 
        # test setup 
        local testID="resubmit_1123" 
        local tmpout=$TmpDir/resubmit_1123.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_negative="invalidEmail"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="__NOTFOUNDINDB__"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [EMAIL negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_negative -U $EXTUSAGE_positive -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1123
resubmit_1124()   #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] 
{ 
    rlPhaseStartTest "resubmit_1124 [positive test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: all positive" 
        # test setup 
        local testID="resubmit_1124"  
        local tmpout=$TmpDir/resubmit_1124.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive" 0 "scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1124 

resubmit_1125()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE negative] -S 
{  
    rlPhaseStartTest "resubmit_1125 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1125" 
        local tmpout=$TmpDir/resubmit_1125.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_negative -S" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1125
resubmit_1126()  #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE negative] -s 
{  
    rlPhaseStartTest "resubmit_1126 [negative test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 
        # test setup 
        local testID="resubmit_1126" 
        local tmpout=$TmpDir/resubmit_1126.$RANDOM.out 

        # test local variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"
        local EXTUSAGE_negative="0.0.0.0.1.2.3.4"

        # expectedErrCode expectedErrMsg will be saved in testvalues table 
        local expectedErrCode="1" 
        local expectedErrMsg="Could not evaluate OID"  
        local comment="scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: [EXTUSAGE negative] used" 

        # test starts here 
        #KinitAsAdmin 
        qaRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_negative -s" "$tmpout" $expectedErrCode "$expectedErrMsg" "$comment" 
        #Kcleanup 

        # test cleanup 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1126
resubmit_1127()   #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -S 
{ 
    rlPhaseStartTest "resubmit_1127 [positive test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: all positive" 
        # test setup 
        local testID="resubmit_1127"  
        local tmpout=$TmpDir/resubmit_1127.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -S" 0 "scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1127 

resubmit_1128()   #ipa-getcert resubmit -i [CertNickName positive] -f [PemCertFile positive] -p [PINFILE positive] -N [CertSubjectName positive] -U [EXTUSAGE positive] -K [CertPrincipalName positive] -D [DNSName positive] -E [EMAIL positive] -U [EXTUSAGE positive] -s 
{ 
    rlPhaseStartTest "resubmit_1128 [positive test] scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: all positive" 
        # test setup 
        local testID="resubmit_1128"  
        local tmpout=$TmpDir/resubmit_1128.$RANDOM.out 

        # local test variables
        local CertNickName_positive="TestCert-Name"
        local PemCertFile_positive="__NOTFOUNDINDB__"
        local PINFILE_positive="__NOTFOUNDINDB__"
        local CertSubjectName_positive="__NOTFOUNDINDB__"
        local EXTUSAGE_positive="1.3.6.1.5.5.7.3.1"
        local CertPrincipalName_positive="__NOTFOUNDINDB__"
        local DNSName_positive="test.redhat.com"
        local EMAIL_positive="testqa@redhat.com"

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert resubmit -i $CertNickName_positive -f $PemCertFile_positive -p $PINFILE_positive -N $CertSubjectName_positive -U $EXTUSAGE_positive -K $CertPrincipalName_positive -D $DNSName_positive -E $EMAIL_positive -U $EXTUSAGE_positive -s" 0 "scenario: [ipa-getcert resubmit -i -f -p -N -U -K -D -E -I -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #resubmit_1128 

list()
{ #total test cases: 4
    list_envsetup
    list_1001	#scenario: [ipa-getcert list -r -S]	data: all positive
    list_1002	#scenario: [ipa-getcert list -r -s]	data: all positive
    list_1003	#scenario: [ipa-getcert list -t -S]	data: all positive
    list_1004	#scenario: [ipa-getcert list -t -s]	data: all positive
    list_envcleanup
} #list
list_envsetup()
{
    rlPhaseStartSetup "list_envsetup"
        #environment setup starts here
        #environment setup ends   here
    rlPhaseEnd
} #envsetup
list_envcleanup()
{
    rlPhaseStartCleanup "list_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

list_1001()   #ipa-getcert list -r -S 
{ 
    rlPhaseStartTest "list_1001 [positive test] scenario: [ipa-getcert list -r -S]	data: all positive" 
        # test setup 
        local testID="list_1001"  
        local tmpout=$TmpDir/list_1001.$RANDOM.out 

        # local test variables

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert list -r -S" 0 "scenario: [ipa-getcert list -r -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #list_1001 

list_1002()   #ipa-getcert list -r -s 
{ 
    rlPhaseStartTest "list_1002 [positive test] scenario: [ipa-getcert list -r -s]	data: all positive" 
        # test setup 
        local testID="list_1002"  
        local tmpout=$TmpDir/list_1002.$RANDOM.out 

        # local test variables

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert list -r -s" 0 "scenario: [ipa-getcert list -r -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #list_1002 

list_1003()   #ipa-getcert list -t -S 
{ 
    rlPhaseStartTest "list_1003 [positive test] scenario: [ipa-getcert list -t -S]	data: all positive" 
        # test setup 
        local testID="list_1003"  
        local tmpout=$TmpDir/list_1003.$RANDOM.out 

        # local test variables

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert list -t -S" 0 "scenario: [ipa-getcert list -t -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #list_1003 

list_1004()   #ipa-getcert list -t -s 
{ 
    rlPhaseStartTest "list_1004 [positive test] scenario: [ipa-getcert list -t -s]	data: all positive" 
        # test setup 
        local testID="list_1004"  
        local tmpout=$TmpDir/list_1004.$RANDOM.out 

        # local test variables

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert list -t -s" 0 "scenario: [ipa-getcert list -t -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #list_1004 

list_cas()
{ #total test cases: 3
    list_cas_envsetup
    list_cas_1001	#scenario: [ipa-getcert list-cas ]	data: all positive
    list_cas_1002	#scenario: [ipa-getcert list-cas -S]	data: all positive
    list_cas_1003	#scenario: [ipa-getcert list-cas -s]	data: all positive
    list_cas_envcleanup
} #list_cas
list_cas_envsetup()
{
    rlPhaseStartSetup "list_cas_envsetup"
        #environment setup starts here
        #environment setup ends   here
    rlPhaseEnd
} #envsetup
list_cas_envcleanup()
{
    rlPhaseStartCleanup "list_cas_envcleanup"
        #environment cleanup starts here
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

list_cas_1001()   #ipa-getcert list-cas  
{ 
    rlPhaseStartTest "list_cas_1001 [positive test] scenario: [ipa-getcert list-cas ]	data: all positive" 
        # test setup 
        local testID="list_cas_1001"  
        local tmpout=$TmpDir/list_cas_1001.$RANDOM.out 

        # local test variables

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert list-cas " 0 "scenario: [ipa-getcert list-cas ]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #list_cas_1001 

list_cas_1002()   #ipa-getcert list-cas -S 
{ 
    rlPhaseStartTest "list_cas_1002 [positive test] scenario: [ipa-getcert list-cas -S]	data: all positive" 
        # test setup 
        local testID="list_cas_1002"  
        local tmpout=$TmpDir/list_cas_1002.$RANDOM.out 

        # local test variables

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert list-cas -S" 0 "scenario: [ipa-getcert list-cas -S]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #list_cas_1002 

list_cas_1003()   #ipa-getcert list-cas -s 
{ 
    rlPhaseStartTest "list_cas_1003 [positive test] scenario: [ipa-getcert list-cas -s]	data: all positive" 
        # test setup 
        local testID="list_cas_1003"  
        local tmpout=$TmpDir/list_cas_1003.$RANDOM.out 

        # local test variables

        # test starts here 
        #KinitAsAdmin 
        rlRun "ipa-getcert list-cas -s" 0 "scenario: [ipa-getcert list-cas -s]	data: all positive"  
        #Kcleanup 
        # test ends here 

        # test clean up 
        if [ -f $tmpout ];then 
            rm $tmpout 
        fi 
    rlPhaseEnd 
} #list_cas_1003 

