#!/bin/bash
# By  : Automatic Generated by at.3.testcase.pl
# Date: Fri Jan 21 10:04:18 2011

. ./lib.delegation.sh

role()
{
    role_add
    role_add_member
    role_add_privilege
    role_del
    role_find
    role_mod
    role_remove_member
    role_remove_privilege
    role_show
} #role

#############################################
#  test suite: role-add (5 test cases)
#############################################
role_add()
{
    role_add_envsetup
    role_add_1001  #test_scenario (negative test): [--addattr;negative;STR]
    role_add_1002  #test_scenario (positive test): [--addattr;positive;STR]
    role_add_1003  #test_scenario (positive test): [--desc;positive;auto generated description data]
    role_add_1004  #test_scenario (negative test): [--setattr;negative;STR]
    role_add_1005  #test_scenario (positive test): [--setattr;positive;STR]
    role_add_envcleanup
} #role-add

role_add_envsetup()
{
    rlPhaseStartSetup "role_add_envsetup"
        #environment setup starts here
        KinitAsAdmin
        addRoleTestAccounts
        Kcleanup
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

role_add_envcleanup()
{
    rlPhaseStartCleanup "role_add_envcleanup"
        #environment cleanup starts here
        KinitAsAdmin
        deleteRoleTestAccounts
        Kcleanup
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

role_add_1001()
{ #test_scenario (negative): --addattr;negative;STR
    rlPhaseStartTest "role_add_1001"
        local testID="role_add_1001"
        local tmpout=$TmpDir/role_add_1001.$RANDOM.out
        KinitAsAdmin
        local addattr_TestValue_Negative="STR" #addattr;negative;STR
        local expectedErrMsg="invalid 'addattr': Invalid format. Should be name=value"
        local expectedErrCode=1
        qaRun "ipa role-add $testID --desc=4_$testID  --addattr=$addattr_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [addattr]=[$addattr_TestValue_Negative]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_1001

role_add_1002()
{ #test_scenario (positive): --addattr;positive;STR
    rlPhaseStartTest "role_add_1002"
        local testID="role_add_1002"
        local tmpout=$TmpDir/role_add_1002.$RANDOM.out
        KinitAsAdmin
        local addattr_TestValue="" #addattr;negative;STR
        rlRun "ipa role-add $testID --desc=4_$testID  --addattr=$addattr_TestValue" 0 "empty value in addattr will be ignored " 
        rlRun "ipa role-del $testID" 0 "delete rold: $testID to clean up env"

        addattr_TestValue="member=uid=$testUser001,cn=users,cn=accounts,$testDC" #addattr;positive;STR
        rlRun "ipa role-add $testID --desc=4_$testID  --addattr=$addattr_TestValue " 0 "test options:  [addattr]=[$addattr_TestValue]" 
        checkRoleInfo $testID "Member users" "$testUser001"
        rlRun "ipa role-del $testID" 0 "delete rold: $testID to clean up env"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_1002

role_add_1003()
{ #test_scenario (positive): --desc;positive;auto generated description data
    rlPhaseStartTest "role_add_1003"
        local testID="role_add_1003"
        local tmpout=$TmpDir/role_add_1003.$RANDOM.out
        KinitAsAdmin
        local desc_TestValue="auto_generated_description_data_$testID" #desc;positive;auto generated description data
        rlRun "ipa role-add $testID  --desc=$desc_TestValue " 0 "test options:  [desc]=[$desc_TestValue]" 
        rlRun "ipa role-del $testID"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_1003

role_add_1004()
{ #test_scenario (negative): --setattr;negative;STR
    rlPhaseStartTest "role_add_1004"
        local testID="role_add_1004"
        local tmpout=$TmpDir/role_add_1004.$RANDOM.out
        KinitAsAdmin
        local setattr_TestValue_Negative="desc=newDescValue" #setattr;negative;STR
        local expectedErrMsg="attribute \"desc\" not allowed"
        local expectedErrCode=1
        qaRun "ipa role-add $testID --desc=4_$testID  --setattr=$setattr_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [setattr]=[$setattr_TestValue_Negative]" 

        setattr_TestValue_Negative="member=uid=NoSuchUser$RANDOM,cn=users,cn=accounts,$testDC" #setattr;negative;STR
        expectedErrMsg=replace_me
        expectedErrCode=1
        qaRun "ipa role-add $testID  --desc=4_$testID --setattr=$setattr_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [setattr]=[$setattr_TestValue_Negative]" 
        ipa role-del $testID # cleanup env

        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_1004

role_add_1005()
{ #test_scenario (positive): --setattr;positive;STR
    rlPhaseStartTest "role_add_1005"
        local testID="role_add_1005"
        local tmpout=$TmpDir/role_add_1005.$RANDOM.out
        KinitAsAdmin
        local setattr_TestValue="" #setattr;negative;STR
        rlRun "ipa role-add $testID --desc=4_$testID  --setattr=$setattr_TestValue_Negative " 0 "empty setaddr value will be ignored"
        rlRun "ipa role-del $testID" 0 "clean up role: $testID"

        setattr_TestValue="member=cn=$testGroup,cn=groups,cn=accounts,$testDC" #setattr;positive;STR
        rlRun "ipa role-add $testID --desc=4_$testID  --setattr=$setattr_TestValue " 0 "test options:  [setattr]=[$setattr_TestValue]" 
        checkRoleInfo $testID "member groups" "$testGroup"
        rlRun "ipa role-del $testID" 0 "clean up role: $testID"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_1005

#END OF TEST CASE for [role-add]

#############################################
#  test suite: role-add_member (7 test cases)
#############################################
role_add_member()
{
    role_add_member_envsetup
    role_add_member_1001  #test_scenario (negative test): [--groups;negative;nonListValue]
    role_add_member_1002  #test_scenario (negative test): [--groups;negative;nonListValue --users;positive;LIST]
    role_add_member_1003  #test_scenario (positive test): [--groups;positive;LIST]
    role_add_member_1004  #test_scenario (negative test): [--groups;positive;LIST --users;negative;nonListValue]
    role_add_member_1005  #test_scenario (positive test): [--groups;positive;LIST --users;positive;LIST]
    role_add_member_1006  #test_scenario (negative test): [--users;negative;nonListValue]
    role_add_member_1007  #test_scenario (positive test): [--users;positive;LIST]
    role_add_member_envcleanup
} #role-add_member

role_add_member_envsetup()
{
    rlPhaseStartSetup "role_add_member_envsetup"
        #environment setup starts here
        KinitAsAdmin
        addRoleTestAccounts
        rlRun "ipa role-add $testRole --desc=role_for_role_test" 0 "add test role [$testRole]"
        Kcleanup
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

role_add_member_envcleanup()
{
    rlPhaseStartCleanup "role_add_member_envcleanup"
        #environment cleanup starts here
        KinitAsAdmin
        deleteRoleTestAccounts
        rlRun "ipa role-del $testRole" 0 "delete test role [$testRole]"
        Kcleanup
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

role_add_member_1001()
{ #test_scenario (negative): --groups;negative;nonListValue
    rlPhaseStartTest "role_add_member_1001"
        local testID="role_add_member_1001"
        local tmpout=$TmpDir/role_add_member_1001.$RANDOM.out
        KinitAsAdmin
        local groups_TestValue_Negative="nonListValue" #groups;negative;nonListValue
        ipa role-add-member $testRole  --groups=$groups_TestValue_Negative 2>&1 > $tmpout
        if grep "group: $groups_TestValue_Negative: no such entry" $tmpout 2>&1 >/dev/null;then
            rlPass "add non-exist member failed as expected"
        else
            rlFail "no expected error msg found"
            echo "============output=============="
            cat $tmpout
            echo "================================"
        fi 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_member_1001

role_add_member_1002()
{ #test_scenario (negative): --groups;negative;nonListValue --users;positive;LIST
    rlPhaseStartTest "role_add_member_1002"
        local testID="role_add_member_1002"
        local tmpout=$TmpDir/role_add_member_1002.$RANDOM.out
        KinitAsAdmin
        local groups_TestValue_Negative="nonListValue" #groups;negative;nonListValue
        local users_TestValue="$testUser003" #users;positive;LIST
        ipa role-add-member $testRole  --groups=$groups_TestValue_Negative  --users=$users_TestValue 2>&1 >$tmpout
        if grep "group: $groups_TestValue_Negative: no such entry" $tmpout 2>&1 >/dev/null;then
            rlPass "add non-exist member failed as expected"
        else
            rlFail "no expected error msg found"
            echo "============output=============="
            cat $tmpout
            echo "================================"
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_member_1002

role_add_member_1003()
{ #test_scenario (positive): --groups;positive;LIST
    rlPhaseStartTest "role_add_member_1003"
        local testID="role_add_member_1003"
        local tmpout=$TmpDir/role_add_member_1003.$RANDOM.out
        KinitAsAdmin
        local groups_TestValue="$testGroup" #groups;positive;LIST
        rlRun "ipa role-add-member $testRole  --groups=$groups_TestValue " 0 "add [groups]=[$groups_TestValue] to role: [$testRole]" 
        rlRun "ipa role-remove-member $testRole  --groups=$groups_TestValue " 0 "restore env: remove [$groups_TestValue]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_member_1003

role_add_member_1004()
{ #test_scenario (negative): --groups;positive;LIST --users;negative;nonListValue
    rlPhaseStartTest "role_add_member_1004"
        local testID="role_add_member_1004"
        local tmpout=$TmpDir/role_add_member_1004.$RANDOM.out
        KinitAsAdmin
        createTestRole $testID
        local groups_TestValue="$testGroup" #groups;positive;LIST
        local users_TestValue_Negative="nonListValue" #users;negative;nonListValue
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        ipa role-add-member $testID --groups=$groups_TestValue  --users=$users_TestValue_Negative 2>&1 > $tmpout
        if grep "user: $users_TestValue_Negative: no such entry" $tmpout 2>&1 >/dev/null;then
            rlPass "add non-exist user member failed as expected"
        else
            rlFail "no expected error msg found"
            echo "============output=============="
            cat $tmpout
            echo "================================"
        fi
        deleteTestRole $testID
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_member_1004

role_add_member_1005()
{ #test_scenario (positive): --groups;positive;LIST --users;positive;LIST
    rlPhaseStartTest "role_add_member_1005"
        local testID="role_add_member_1005"
        local tmpout=$TmpDir/role_add_member_1005.$RANDOM.out
        KinitAsAdmin
        createTestRole $testID
        local groups_TestValue="$testGroup" #groups;positive;LIST
        local users_TestValue="$testUser003" #users;positive;LIST
        rlRun "ipa role-add-member $testID  --groups=$groups_TestValue  --users=$users_TestValue " 0 "test options:  [groups]=[$groups_TestValue] [users]=[$users_TestValue]" 
        checkRoleInfo $testRole "Member group" "$groups_TestValue"
        checkRoleInfo $testRole "Member user" "$users_TestValue"
        deleteTestRole $testID
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_member_1005

role_add_member_1006()
{ #test_scenario (negative): --users;negative;nonListValue
    rlPhaseStartTest "role_add_member_1006"
        local testID="role_add_member_1006"
        local tmpout=$TmpDir/role_add_member_1006.$RANDOM.out
        KinitAsAdmin
        createTestRole $testID
        local users_TestValue_Negative="nonListValue" #users;negative;nonListValue
        local expectedErrMsg="role not found"
        local expectedErrCode=1
        ipa role-add-member $testID  --users=$users_TestValue_Negative 2>&1 >$tmpout
        if grep "user: $users_TestValue_Negative: no such entry" $tmpout 2>&1 >/dev/null;then
            rlPass "non-exist user can not add as member, test pass"
        else
            rlFail "non-exist user added as member, test failed"
        fi
        deleteTestRole $testID
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_member_1006

role_add_member_1007()
{ #test_scenario (positive): --users;positive;LIST
    rlPhaseStartTest "role_add_member_1007"
        local testID="role_add_member_1007"
        local tmpout=$TmpDir/role_add_member_1007.$RANDOM.out
        KinitAsAdmin
        createTestRole $testID
        local users_TestValue="$testUser001" #users;positive;LIST
        rlRun "ipa role-add-member $testID  --users=$users_TestValue " 0 "test options:  [users]=[$users_TestValue]" 
        checkRoleInfo $testID "Member users" "$users_TestValue"
        deleteTestRole $testID
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_member_1007

#END OF TEST CASE for [role-add-member]

#############################################
#  test suite: role-add_privilege (2 test cases)
#############################################
role_add_privilege()
{
    role_add_privilege_envsetup
    role_add_privilege_1001  #test_scenario (negative test): [--privileges;negative;nonListValue]
    role_add_privilege_1002  #test_scenario (positive test): [--privileges;positive;LIST]
    role_add_privilege_envcleanup
} #role-add-privilege

role_add_privilege_envsetup()
{
    rlPhaseStartSetup "role_add_privilege_envsetup"
        #environment setup starts here
        createTestPrivilege $testPrivilege
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

role_add_privilege_envcleanup()
{
    rlPhaseStartCleanup "role_add_privilege_envcleanup"
        #environment cleanup starts here
        deleteTestPrivilege $testPrivilege
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

role_add_privilege_1001()
{ #test_scenario (negative): --privileges;negative;nonListValue
    rlPhaseStartTest "role_add_privilege_1001"
        local testID="role_add_privilege_1001"
        local tmpout=$TmpDir/role_add_privilege_1001.$RANDOM.out
        KinitAsAdmin
        createTestRole $testID
        local privileges_TestValue_Negative="nonListValue" #privileges;negative;nonListValue
        local expectedErrMsg="privilege not found"
        local expectedErrCode=1
        ipa role-add-privilege $testID  --privileges=$privileges_TestValue_Negative 2>&1 >$tmpout
        if grep -i "$expectedErrMsg" $tmpout 2>&1 > /dev/null ;then
            rlPass "expected error msg matches"
        else
            rlFail "expected error msg not found"
            echo "-----------output--------------"
            cat $tmpout
            echo "==============================="
        fi
        deleteTestRole $testID
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_privilege_1001

role_add_privilege_1002()
{ #test_scenario (positive): --privileges;positive;LIST
    rlPhaseStartTest "role_add_privilege_1002"
        local testID="role_add_privilege_1002"
        local tmpout=$TmpDir/role_add_privilege_1002.$RANDOM.out
        KinitAsAdmin
        createTestRole $testID
        local privileges_TestValue="$testPrivilege" #privileges;positive;LIST
        rlRun "ipa role-add-privilege $testID  --privileges=$privileges_TestValue " 0 "test options:  [privileges]=[$privileges_TestValue]" 
        checkRoleInfo $testID "Privileges" "$testPrivilege"
        deleteTestRole $testID
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_add_privilege_1002

#END OF TEST CASE for [role-add-privilege]

#############################################
#  test suite: role-del (1 test cases)
#############################################
role_del()
{
    role_del_envsetup
    role_del_1001  #test_scenario (positive test): [--continue]
    role_del_envcleanup
} #role-del

role_del_envsetup()
{
    rlPhaseStartSetup "role_del_envsetup"
        #environment setup starts here
        rlLog "create roles for delete test: del001, del002, del003, del004"
        KinitAsAdmin
        createTestRole "del001"
        createTestRole "del002"
        createTestRole "del003"
        createTestRole "del004"
        Kcleanup
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

role_del_envcleanup()
{
    rlPhaseStartCleanup "role_del_envcleanup"
        #environment cleanup starts here
        rlPass "no special cleanup necessary if role_del_1001 passed"
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

role_del_1001()
{ #test_scenario (positive): --continue
    rlPhaseStartTest "role_del_1001"
        local testID="role_del_1001"
        local tmpout=$TmpDir/role_del_1001.$RANDOM.out
        KinitAsAdmin
        rlRun "ipa role-del --continue $testID" 0 "test options: " 0 "role [$role] Does not exist"
        rlRun "ipa role-del --continue del001 $testID" 0 "test options: " 0 "role [$role] Does not exist, after existing one"
        rlRun "ipa role-del --continue $testID del002" 0 "test options: " 0 "role [$role] Does not exist, before existing one"
        rlRun "ipa role-del --continue del003 $testID del004 " 0 "test options: " 0 "role [$role] Does not exist, middle of existing ones"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_del_1001

#END OF TEST CASE for [role-del]

#############################################
#  test suite: role-find (13 test cases)
#############################################
role_find()
{
    role_find_envsetup
    role_find_1001  #test_scenario (positive test): [--desc;positive;auto generated description data]
    role_find_1002  #test_scenario (negative test): [--desc;positive;auto generated description data --name;negative;STR --sizelimit;positive;INT --timelimit;positive;INT]
    role_find_1003  #test_scenario (negative test): [--desc;positive;auto generated description data --name;positive;STR --sizelimit;negative;INT --timelimit;positive;INT]
    role_find_1004  #test_scenario (negative test): [--desc;positive;auto generated description data --name;positive;STR --sizelimit;positive;INT --timelimit;negative;INT]
    role_find_1005  #test_scenario (positive test): [--desc;positive;auto generated description data --name;positive;STR --sizelimit;positive;INT --timelimit;positive;INT]
    role_find_1006  #test_scenario (negative test): [--name;negative;STR]
    role_find_1007  #test_scenario (positive test): [--name;positive;STR]
    role_find_1008  #test_scenario (boundary test): [--sizelimit;boundary;INT]
    role_find_1009  #test_scenario (negative test): [--sizelimit;negative;INT]
    role_find_1010  #test_scenario (positive test): [--sizelimit;positive;INT]
    role_find_1011  #test_scenario (boundary test): [--timelimit;boundary;INT]
    role_find_1012  #test_scenario (negative test): [--timelimit;negative;INT]
    role_find_1013  #test_scenario (positive test): [--timelimit;positive;INT]
    role_find_envcleanup
} #role-find

role_find_envsetup()
{
    rlPhaseStartSetup "role_find_envsetup"
        #environment setup starts here
        rlLog "create roles for delete test: findrole001, findrole002, findrole003, findrole004"
        KinitAsAdmin
        createTestRole "findrole001"
        createTestRole "findrole002"
        createTestRole "findrole003"
        createTestRole "findrole004"
        Kcleanup
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

role_find_envcleanup()
{
    rlPhaseStartCleanup "role_find_envcleanup"
        #environment cleanup starts here
        KinitAsAdmin
        deleteTestRole "findrole001"
        deleteTestRole "findrole002"
        deleteTestRole "findrole003"
        deleteTestRole "findrole004"
        Kcleanup
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

role_find_1001()
{ #test_scenario (positive): --desc;positive;auto generated description data
    rlPhaseStartTest "role_find_1001"
        local testID="role_find_1001"
        local tmpout=$TmpDir/role_find_1001.$RANDOM.out
        KinitAsAdmin
        local desc_TestValue="4_findrole001" #desc;positive;auto generated description data
        total=`ipa role-find --desc=$desc_TestValue | grep "role\|roles matched" | cut -d" " -f1`
        if [ "$total" = "1" ];then
            rlPass "find one role as expected"
        else
            rlFail "expect 1 but get [$total]"
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1001

role_find_1002()
{ #test_scenario (negative): --desc;positive;auto generated description data --name;negative;STR --sizelimit;positive;INT --timelimit;positive;INT
    rlPhaseStartTest "role_find_1002"
        local testID="role_find_1002"
        local tmpout=$TmpDir/role_find_1002.$RANDOM.out
        KinitAsAdmin
        local desc_TestValue="4_findrole002" #desc;positive;auto generated description data
        local name_TestValue_Negative="NoSuchRole" #name;negative;STR
        local sizelimit_TestValue="2" #sizelimit;positive;INT
        local timelimit_TestValue="2" #timelimit;positive;INT
        total=`ipa role-find $name_TestValue_Negative --desc=$desc_TestValue  --name=$name_TestValue_Negative  --sizelimit=$sizelimit_TestValue  --timelimit=$timelimit_TestValue  | grep "role\|roles matched" | cut -d" " -f1`
        if [ "$total" = "0" ];then
            rlPass "find 0 role as expected"
        else
            rlFail "expect 0 but get [$total]"
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1002

role_find_1003()
{ #test_scenario (negative): --desc;positive;auto generated description data --name;positive;STR --sizelimit;negative;INT --timelimit;positive;INT
    rlPhaseStartTest "role_find_1003"
        local testID="role_find_1003"
        local tmpout=$TmpDir/role_find_1003.$RANDOM.out
        KinitAsAdmin
        local desc_TestValue="4_findrole003" #desc;positive;auto generated description data
        local name_TestValue="findrole003" #name;positive;STR
        local sizelimit_TestValue_Negative="abc" #sizelimit;negative;INT
        local timelimit_TestValue="2" #timelimit;positive;INT
        local expectedErrMsg="invalid 'sizelimit': must be an integer"
        qaRun "ipa role-find --desc=$desc_TestValue  --name=$name_TestValue  --sizelimit=$sizelimit_TestValue_Negative  --timelimit=$timelimit_TestValue" $tmpout 1 "$expectedErrMsg" "negative test case: sizelimit_TestValue_Negative=abc"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1003

role_find_1004()
{ #test_scenario (negative): --desc;positive;auto generated description data --name;positive;STR --sizelimit;positive;INT --timelimit;negative;INT
    rlPhaseStartTest "role_find_1004"
        local testID="role_find_1004"
        local tmpout=$TmpDir/role_find_1004.$RANDOM.out
        KinitAsAdmin
        local desc_TestValue="4_findrole004" #desc;positive;auto generated description data
        local name_TestValue="findrole004" #name;positive;STR
        local sizelimit_TestValue="2" #sizelimit;positive;INT
        local timelimit_TestValue_Negative="abc" #timelimit;negative;INT
        local expectedErrMsg="invalid 'timelimit': must be an integer"
        qaRun "ipa role-find --desc=$desc_TestValue  --name=$name_TestValue  --sizelimit=$sizelimit_TestValue  --timelimit=$timelimit_TestValue_Negative" $tmpout  1 "$expectedErrMsg" "negative test: timelimit_TestValue_Negative=abc"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1004

role_find_1005()
{ #test_scenario (positive): --desc;positive;auto generated description data --name;positive;STR --sizelimit;positive;INT --timelimit;positive;INT
    rlPhaseStartTest "role_find_1005"
        local testID="role_find_1005"
        local tmpout=$TmpDir/role_find_1005.$RANDOM.out
        KinitAsAdmin
        local desc_TestValue="4_findrole001" #desc;positive;auto generated description data
        local name_TestValue="findrole001" #name;positive;STR
        local sizelimit_TestValue="2" #sizelimit;positive;INT
        local timelimit_TestValue="2" #timelimit;positive;INT
        total=`ipa role-find --desc=$desc_TestValue  --name=$name_TestValue  --sizelimit=$sizelimit_TestValue  --timelimit=$timelimit_TestValue | grep "role\|roles matched" | cut -d" " -f1 `
        if [ "$total" = "1" ];then
            rlPass "find 1 role as expected"
        else
            rlFail "expect 1 but get [$total]"
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1005

role_find_1006()
{ #test_scenario (negative): --name;negative;STR
    rlPhaseStartTest "role_find_1006"
        local testID="role_find_1006"
        local tmpout=$TmpDir/role_find_1006.$RANDOM.out
        KinitAsAdmin
        local name_TestValue_Negative="" #name;negative;STR
        local expectedErrMsg="name option requires an argument"
        local expectedErrCode=2
        qaRun "ipa role-find --name" "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [name]=[$name_TestValue_Negative]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1006

role_find_1007()
{ #test_scenario (positive): --name;positive;STR
    rlPhaseStartTest "role_find_1007"
        local testID="role_find_1007"
        local tmpout=$TmpDir/role_find_1007.$RANDOM.out
        KinitAsAdmin
        local name_TestValue="findrole002" #name;positive;STR
        total=`ipa role-find --name=$name_TestValue | grep "role\|roles matched" | cut -d" " -f1 `
        if [ "$total" = "1" ];then
            rlPass "find 1 role as expected"
        else
            rlFail "expect 1 but get [$total]"
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1007

role_find_1008()
{ #test_scenario (boundary): --sizelimit;boundary;INT
    rlPhaseStartTest "role_find_1008"
        local testID="role_find_1008"
        local tmpout=$TmpDir/role_find_1008.$RANDOM.out
        KinitAsAdmin
        local sizelimit_TestValue="0" #sizelimit;boundary;INT
        total=`ipa role-find findrole00 --sizelimit=$sizelimit_TestValue | grep "role\|roles matched" | cut -d" " -f1`
        if [ "$total" = "4" ];then
            rlPass "sizelimit=0 will return all matched records"
        else
            rlFail "not all matched records returned when it should, acutal[$total], expected: 4"
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1008

role_find_1009()
{ #test_scenario (negative): --sizelimit;negative;INT
    rlPhaseStartTest "role_find_1009"
        local testID="role_find_1009"
        local tmpout=$TmpDir/role_find_1009.$RANDOM.out
        KinitAsAdmin
        local sizelimit_TestValue_Negative="abc" #sizelimit;negative;INT
        local expectedErrMsg="invalid 'sizelimit': must be an integer"
        local expectedErrCode=1
        qaRun "ipa role-find --sizelimit=$sizelimit_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [sizelimit]=[$sizelimit_TestValue_Negative]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1009

role_find_1010()
{ #test_scenario (positive): --sizelimit;positive;INT
    rlPhaseStartTest "role_find_1010"
        local testID="role_find_1010"
        local tmpout=$TmpDir/role_find_1010.$RANDOM.out
        KinitAsAdmin
        local sizelimit_TestValue="2" #sizelimit;positive;INT
        total=`ipa role-find findrole --sizelimit=$sizelimit_TestValue | grep "role\|roles matched" | cut -d" " -f1`
        if [ "$total" = "$sizelimit_TestValue" ];then
            rlPass "find $sizelimit_TestValue role as expected"
        else
            rlFail "expect $sizelimit_TestValue but get [$total]"
        fi

        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1010

role_find_1011()
{ #test_scenario (boundary): --timelimit;boundary;INT
    rlPhaseStartTest "role_find_1011"
        local testID="role_find_1011"
        local tmpout=$TmpDir/role_find_1011.$RANDOM.out
        KinitAsAdmin
        local timelimit_TestValue="0" #timelimit;boundary;INT
        rlRun "ipa role-find --timelimit=$timelimit_TestValue " 0 "test options:  [timelimit]=[$timelimit_TestValue]" 
        rlFail "don't know what is right behave when timelimit=boundary, Rob says this should be disallowed in new build"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1011

role_find_1012()
{ #test_scenario (negative): --timelimit;negative;INT
    rlPhaseStartTest "role_find_1012"
        local testID="role_find_1012"
        local tmpout=$TmpDir/role_find_1012.$RANDOM.out
        KinitAsAdmin
        local timelimit_TestValue_Negative="abc" #timelimit;negative;INT
        local expectedErrMsg="invalid 'timelimit': must be an integer"
        local expectedErrCode=1
        qaRun "ipa role-find $testID  --timelimit=$timelimit_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [timelimit]=[$timelimit_TestValue_Negative]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1012

role_find_1013()
{ #test_scenario (positive): --timelimit;positive;INT
    rlPhaseStartTest "role_find_1013"
        local testID="role_find_1013"
        local tmpout=$TmpDir/role_find_1013.$RANDOM.out
        KinitAsAdmin
        local timelimit_TestValue="2" #timelimit;positive;INT
        total=`ipa role-find findrole --timelimit=$timelimit_TestValue | grep "role\|roles matched" | cut -d" " -f1`
        if [ "$total" = "4" ];then
            rlPass "find 4 role as expected"
        else
            rlFail "expect 4 but get [$total]"
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_find_1013

#END OF TEST CASE for [role-find]

#############################################
#  test suite: role-mod (9 test cases)
#############################################
role_mod()
{
    role_mod_envsetup
    role_mod_1001  #test_scenario (negative test): [--addattr;negative;STR]
    role_mod_1002  #test_scenario (positive test): [--addattr;positive;STR]
    role_mod_1003  #test_scenario (positive test): [--desc;positive;auto generated description data]
    role_mod_1004  #test_scenario (negative test): [--desc;positive;auto generated description data --rename;negative;STR]
    role_mod_1005  #test_scenario (positive test): [--desc;positive;auto generated description data --rename;positive;STR]
    role_mod_1006  #test_scenario (negative test): [--rename;negative;STR]
    role_mod_1007  #test_scenario (positive test): [--rename;positive;STR]
    role_mod_1008  #test_scenario (negative test): [--setattr;negative;STR]
    role_mod_1009  #test_scenario (positive test): [--setattr;positive;STR]
    role_mod_envcleanup
} #role-mod

role_mod_envsetup()
{
    rlPhaseStartSetup "role_mod_envsetup"
        #environment setup starts here
        KinitAsAdmin
        createTestRole $testRole
        Kcleanup
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

role_mod_envcleanup()
{
    rlPhaseStartCleanup "role_mod_envcleanup"
        #environment cleanup starts here
        KinitAsAdmin
        deleteTestRole $testRole
        Kcleanup
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

role_mod_1001()
{ #test_scenario (negative): --addattr;negative;STR
    rlPhaseStartTest "role_mod_1001"
        local testID="role_mod_1001"
        local tmpout=$TmpDir/role_mod_1001.$RANDOM.out
        KinitAsAdmin
        local addattr_TestValue_Negative="STR" #addattr;negative;STR
        local expectedErrMsg="invalid 'addattr': Invalid format. Should be name=value"
        local expectedErrCode=1
        qaRun "ipa role-mod $testRole  --addattr=$addattr_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [addattr]=[$addattr_TestValue_Negative]" 

        addattr_TestValue_Negative="description=additionalDesc" #addattr;negative;STR
        expectedErrMsg="Only one value allowed"
        expectedErrCode=1
        qaRun "ipa role-mod $testRole  --addattr=$addattr_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [addattr]=[$addattr_TestValue_Negative]" 

        addattr_TestValue_Negative="memberof=$testPermission_addgrp" #addattr;negative;STR
        expectedErrMsg="Insufficient access: Insufficient 'write' privilege to the 'memberOf' attribute of entry"
        expectedErrCode=1
        qaRun "ipa role-mod $testRole  --addattr=$addattr_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [addattr]=[$addattr_TestValue_Negative]" 

        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_mod_1001

role_mod_1002()
{ #test_scenario (positive): --addattr;positive;STR
    rlPhaseStartTest "role_mod_1002"
        local testID="role_mod_1002"
        local tmpout=$TmpDir/role_mod_1002.$RANDOM.out
        KinitAsAdmin
        local addattr_TestValue="STR" #addattr;positive;STR
        #rlRun "ipa role-mod $testID  --addattr=$addattr_TestValue " 0 "test options:  [addattr]=[$addattr_TestValue]" 
        rlPass "no positive scenario found for this, just make it pass"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_mod_1002

role_mod_1003()
{ #test_scenario (positive): --desc;positive;auto generated description data
    rlPhaseStartTest "role_mod_1003"
        local testID="role_mod_1003"
        local tmpout=$TmpDir/role_mod_1003.$RANDOM.out
        KinitAsAdmin
        createTestRole $testID
        local desc_TestValue="auto_generated_description_data_$testID" #desc;positive;auto generated description data
        rlRun "ipa role-mod $testID  --desc=$desc_TestValue " 0 "test options:  [desc]=[$desc_TestValue]" 
        checkRoleInfo $testID "description" "$desc_TestValue"
        deleteTestRole $testID
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_mod_1003

role_mod_1004()
{ #test_scenario (negative): --desc;positive;auto generated description data --rename;negative;STR
    rlPhaseStartTest "role_mod_1004"
        local testID="role_mod_1004"
        local tmpout=$TmpDir/role_mod_1004.$RANDOM.out
        KinitAsAdmin
        createTestRole $testID
        local desc_TestValue="auto_generated_description_data_$testID" #desc;positive;auto generated description data
        local rename_TestValue_Negative="" #rename;negative;STR
        local expectedErrMsg="No sure about exact error msg: https://bugzilla.redhat.com/show_bug.cgi?id=672711"
        local expectedErrCode=1
        qaRun "ipa role-mod $testID  --desc=$desc_TestValue  --rename=$rename_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [desc]=[$desc_TestValue] [rename]=[$rename_TestValue_Negative]" 
        deleteTestRole $testID
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_mod_1004

role_mod_1005()
{ #test_scenario (positive): --desc;positive;auto generated description data --rename;positive;STR
    rlPhaseStartTest "role_mod_1005"
        local testID="role_mod_1005"
        local tmpout=$TmpDir/role_mod_1005.$RANDOM.out
        KinitAsAdmin
        local desc_TestValue="auto_generated_description_data_$testID" #desc;positive;auto generated description data
        local rename_TestValue="re_$testID" #rename;positive;STR
        rlRun "ipa role-mod $testRole  --desc=$desc_TestValue  --rename=$rename_TestValue " 0 "test options:  [desc]=[$desc_TestValue] [rename]=[$rename_TestValue]" 
        rlRun "ipa role-mod $rename_TestValue --rename=$testRole" 0 "rename it back to [$testRole]"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_mod_1005

role_mod_1006()
{ #test_scenario (negative): --rename;negative;STR
    rlPhaseStartTest "role_mod_1006"
        local testID="role_mod_1006"
        local tmpout=$TmpDir/role_mod_1006.$RANDOM.out
        KinitAsAdmin
        createTestRole $testID
        local rename_TestValue_Negative="" #rename;negative;STR
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        qaRun "ipa role-mod $testID  --rename=$rename_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [rename]=[$rename_TestValue_Negative]" 
        deleteTestRole $testID
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_mod_1006

role_mod_1007()
{ #test_scenario (positive): --rename;positive;STR
    rlPhaseStartTest "role_mod_1007"
        local testID="role_mod_1007"
        local tmpout=$TmpDir/role_mod_1007.$RANDOM.out
        KinitAsAdmin
        local rename_TestValue="re_$testID" #rename;positive;STR
        rlRun "ipa role-mod $testRole --rename=$rename_TestValue" 0 "test options:  [rename]=[$rename_TestValue]" 
        rlRun "ipa role-mod $rename_TestValue --rename=$testRole" 0 "test options:  rename back to [$testRole]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_mod_1007

role_mod_1008()
{ #test_scenario (negative): --setattr;negative;STR
    rlPhaseStartTest "role_mod_1008"
        local testID="role_mod_1008"
        local tmpout=$TmpDir/role_mod_1008.$RANDOM.out
        KinitAsAdmin
        createTestRole $testID
        local setattr_TestValue_Negative="STR" #setattr;negative;STR
        local expectedErrMsg="invalid 'setattr': Invalid format. Should be name=value"
        local expectedErrCode=1
        qaRun "ipa role-mod $testID  --setattr=$setattr_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [setattr]=[$setattr_TestValue_Negative]" 
        deleteTestRole $testID
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_mod_1008

role_mod_1009()
{ #test_scenario (positive): --setattr;positive;STR
    rlPhaseStartTest "role_mod_1009"
        local testID="role_mod_1009"
        local tmpout=$TmpDir/role_mod_1009.$RANDOM.out
        KinitAsAdmin
        local setattr_TestValue="description=newDescription_$testID" #setattr;positive;STR
        rlRun "ipa role-mod $testRole  --setattr=$setattr_TestValue " 0 "test options:  [setattr]=[$setattr_TestValue]" 
        checkRoleInfo $testRole "description" "newDescription_$testID"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_mod_1009

#END OF TEST CASE for [role-mod]

#############################################
#  test suite: role-remove_member (7 test cases)
#############################################
role_remove_member()
{
    role_remove_member_envsetup
    role_remove_member_1001  #test_scenario (negative test): [--groups;negative;nonListValue]
    role_remove_member_1002  #test_scenario (negative test): [--groups;negative;nonListValue --users;positive;LIST]
    role_remove_member_1003  #test_scenario (positive test): [--groups;positive;LIST]
    role_remove_member_1004  #test_scenario (negative test): [--groups;positive;LIST --users;negative;nonListValue]
    role_remove_member_1005  #test_scenario (positive test): [--groups;positive;LIST --users;positive;LIST]
    role_remove_member_1006  #test_scenario (negative test): [--users;negative;nonListValue]
    role_remove_member_1007  #test_scenario (positive test): [--users;positive;LIST]
    role_remove_member_envcleanup
} #role-remove_member

role_remove_member_envsetup()
{
    rlPhaseStartSetup "role_remove_member_envsetup"
        #environment setup starts here
        KinitAsAdmin
        addRoleTestAccounts
        rlRun "ipa role-add $testRole --desc=role_for_role_test" 0 "add test role [$testRole]"
        Kcleanup
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

role_remove_member_envcleanup()
{
    rlPhaseStartCleanup "role_remove_member_envcleanup"
        #environment cleanup starts here
        KinitAsAdmin
        deleteRoleTestAccounts
        rlRun "ipa role-del $testRole" 0 "delete test role [$testRole]"
        rlRun "ipa role-add-member $testRole --groups=$testGroup --users=$testUser003"
        Kcleanup
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

role_remove_member_1001()
{ #test_scenario (negative): --groups;negative;nonListValue
    rlPhaseStartTest "role_remove_member_1001"
        local testID="role_remove_member_1001"
        local tmpout=$TmpDir/role_remove_member_1001.$RANDOM.out
        KinitAsAdmin
        local groups_TestValue_Negative="nonListValue" #groups;negative;nonListValue
        ipa role-remove-member $testRole  --groups=$groups_TestValue_Negative 2>&1 > $tmpout
        if grep "group: $groups_TestValue_Negative: This entry is not a member" $tmpout 2>&1 >/dev/null;then
            rlPass "expected error msg matches"
        else
            rlFail "expected error msg does not match"
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_remove_member_1001

role_remove_member_1002()
{ #test_scenario (negative): --groups;negative;nonListValue --users;positive;LIST
    rlPhaseStartTest "role_remove_member_1002"
        local testID="role_remove_member_1002"
        local tmpout=$TmpDir/role_remove_member_1002.$RANDOM.out
        KinitAsAdmin
        local groups_TestValue_Negative="nonListValue" #groups;negative;nonListValue
        local users_TestValue="$testUser003" #users;positive;LIST
        ipa role-remove-member $testRole  --groups=$groups_TestValue_Negative 2>&1 > $tmpout
        if grep "group: $groups_TestValue_Negative: This entry is not a member" $tmpout 2>&1 >/dev/null;then
            rlPass "expected error msg matches"
        else
            rlFail "expected error msg does not match"
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_remove_member_1002

role_remove_member_1003()
{ #test_scenario (positive): --groups;positive;LIST
    rlPhaseStartTest "role_remove_member_1003"
        local testID="role_remove_member_1003"
        local tmpout=$TmpDir/role_remove_member_1003.$RANDOM.out
        KinitAsAdmin
        local groups_TestValue="$testGroup" #groups;positive;LIST
        ipa role-find $testRole --all > $tmpout
        if grep -i "Member group" $tmpout | grep -i "$groups_TestValue" 2>&1 >/dev/null;then
            rlLog "found member group [$groups_TestValue] before remove"
        else
            rlLog "member group [$groups_TestValue] not found before remove, test won't be valid"
            rlFail "test env wrong"
            return
        fi
        # perform the test
        rlRun "ipa role-remove-member $testRole  --groups=$groups_TestValue " 0 "test options:  [groups]=[$groups_TestValue]" 
        
        ipa role-find $testRole --all > $tmpout
        if grep -i "Member group" $tmpout | grep -i "$groups_TestValue" 2>&1 >/dev/null;then
            rlFail "found member group [$groups_TestValue] after remove is unexpected"
        else
            rlPass "member group [$groups_TestValue] not found after remove is expected"
        fi

        rlRun "ipa role-add-member $testRole --groups=$testGroup" 0 "restore environment: add [$testGroup] back to role: [$testRole]"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_remove_member_1003

role_remove_member_1004()
{ #test_scenario (negative): --groups;positive;LIST --users;negative;nonListValue
    rlPhaseStartTest "role_remove_member_1004"
        local testID="role_remove_member_1004"
        local tmpout=$TmpDir/role_remove_member_1004.$RANDOM.out
        KinitAsAdmin
        local groups_TestValue="$testGroup" #groups;positive;LIST
        local users_TestValue_Negative="nonListValue" #users;negative;nonListValue
        local expectedErrMsg=replace_me
        local expectedErrCode=1
        qaRun "ipa role-remove-member $testRole --groups=$groups_TestValue  --users=$users_TestValue_Negative " "$tmpout" $expectedErrCode "$expectedErrMsg" "test options:  [groups]=[$groups_TestValue] [users]=[$users_TestValue_Negative]" 
        rlRun "ipa role-add-member $testRole  --groups=$groups_TestValue " 0 "add [$groups_TestValue] back to $testRole]"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_remove_member_1004

role_remove_member_1005()
{ #test_scenario (positive): --groups;positive;LIST --users;positive;LIST
    rlPhaseStartTest "role_remove_member_1005"
        local testID="role_remove_member_1005"
        local tmpout=$TmpDir/role_remove_member_1005.$RANDOM.out
        KinitAsAdmin
        local groups_TestValue="$testGroup" #groups;positive;LIST
        local users_TestValue="$testUser003" #users;positive;LIST
        rlRun "ipa role-remove-member $testRole  --groups=$groups_TestValue  --users=$users_TestValue " 0 "test options:  [groups]=[$groups_TestValue] [users]=[$users_TestValue]" 
        rlRun "ipa role-add-member $testRole  --groups=$groups_TestValue  --users=$users_TestValue " 0 "add [$groups_TestValue], [$users_TestValue] back to $testRole]"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_remove_member_1005

role_remove_member_1006()
{ #test_scenario (negative): --users;negative;nonListValue
    rlPhaseStartTest "role_remove_member_1006"
        local testID="role_remove_member_1006"
        local tmpout=$TmpDir/role_remove_member_1006.$RANDOM.out
        KinitAsAdmin
        local users_TestValue_Negative="nonListValue" #users;negative;nonListValue
        ipa role-remove-member $testRole  --users=$users_TestValue_Negative 2>&1>$tmpout
        if grep -i "user: $users_TestValue_Negative: This entry is not a member" $tmpout 2>&1 >/dev/null;then
            rlPass "error msg matches: remove non-exist member"
        else
            rlFail "error msg does not match for removing non-exist member"
            echo "----------------output-------------"
            cat $tmpout
            echo "==================================="
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_remove_member_1006

role_remove_member_1007()
{ #test_scenario (positive): --users;positive;LIST
    rlPhaseStartTest "role_remove_member_1007"
        local testID="role_remove_member_1007"
        local tmpout=$TmpDir/role_remove_member_1007.$RANDOM.out
        KinitAsAdmin
        local users_TestValue="$testUser003" #users;positive;LIST
        rlRun "ipa role-remove-member $testRole  --users=$users_TestValue " 0 "test options:  [users]=[$users_TestValue]" 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_remove_member_1007

#END OF TEST CASE for [role-remove-member]

#############################################
#  test suite: role-remove-privilege (2 test cases)
#############################################
role_remove_privilege()
{
    role_remove_privilege_envsetup
    role_remove_privilege_1001  #test_scenario (negative test): [--privileges;negative;nonListValue]
    role_remove_privilege_1002  #test_scenario (positive test): [--privileges;positive;LIST]
    role_remove_privilege_envcleanup
} #role-remove-privilege

role_remove_privilege_envsetup()
{
    rlPhaseStartSetup "role_remove_privilege_envsetup"
        #environment setup starts here
        KinitAsAdmin
        rlRun "ipa role-add $testRole --desc=role_for_role_test" 0 "add test role [$testRole]"
        rlRun "ipa role-add-privilege $testRole --privileges=groupadmin,useradmin,hostadmin" 0 "add groupadmin,useradmin,hostadmin "
        Kcleanup
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

role_remove_privilege_envcleanup()
{
    rlPhaseStartCleanup "role_remove_privilege_envcleanup"
        #environment cleanup starts here
        KinitAsAdmin
        rlRun "ipa role-del $testRole" 0 "delete test role [$testRole]"
        Kcleanup
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

role_remove_privilege_1001()
{ #test_scenario (negative): --privileges;negative;nonListValue
    rlPhaseStartTest "role_remove_privilege_1001"
        local testID="role_remove_privilege_1001"
        local tmpout=$TmpDir/role_remove_privilege_1001.$RANDOM.out
        KinitAsAdmin
        local privileges_TestValue_Negative="nonListValue" #privileges;negative;nonListValue
        local expectedErrMsg="privilege: $privileges_TestValue_Negative: privilege not found"
        ipa role-remove-privilege $testRole  --privileges=$privileges_TestValue_Negative 2>&1 >$tmpout
        if grep -i "$expectedErrMsg" $tmpout 2>&1 >/dev/null;then
            rlPass "expected error msg found"
        else
            rlFail "no expected error msg found"
            echo "-----------output------------"
            cat $tmpout
            echo "============================="
        fi
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_remove_privilege_1001

role_remove_privilege_1002()
{ #test_scenario (positive): --privileges;positive;LIST
    rlPhaseStartTest "role_remove_privilege_1002"
        local testID="role_remove_privilege_1002"
        local tmpout=$TmpDir/role_remove_privilege_1002.$RANDOM.out
        KinitAsAdmin
        local privileges_TestValue="groupadmin,useradmin" #privileges;positive;LIST
        rlRun "ipa role-remove-privilege $testRole  --privileges=$privileges_TestValue " 0 "test options:  [privileges]=[$privileges_TestValue]" 
        checkRoleInfo $testRole "Privileges" "hostadmin"
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_remove_privilege_1002

#END OF TEST CASE for [role-remove-privilege]

#############################################
#  test suite: role-show (1 test cases)
#############################################
role_show()
{
    role_show_envsetup
    role_show_1001  #test_scenario (positive test): [--all --raw --rights]
    role_show_envcleanup
} #role-show

role_show_envsetup()
{
    rlPhaseStartSetup "role_show_envsetup"
        #environment setup starts here
        KinitAsAdmin
        rlRun "ipa role-add $testRole --desc=role_for_role_test" 0 "add test role [$testRole]"
        Kcleanup
        #environment setup ends   here
    rlPhaseEnd
} #envsetup

role_show_envcleanup()
{
    rlPhaseStartCleanup "role_show_envcleanup"
        #environment cleanup starts here
        KinitAsAdmin
        rlRun "ipa role-del $testRole" 0 "delete test role"
        Kcleanup
        #environment cleanup ends   here
    rlPhaseEnd
} #envcleanup

role_show_1001()
{ #test_scenario (positive): --all --raw --rights
    rlPhaseStartTest "role_show_1001"
        local testID="role_show_1001"
        local tmpout=$TmpDir/role_show_1001.$RANDOM.out
        KinitAsAdmin
        rlRun "ipa role-show $testRole --all --raw --rights " 0 "test options: " 
        Kcleanup
        rm $tmpout
    rlPhaseEnd
} #role_show_1001

#END OF TEST CASE for [role-show]
