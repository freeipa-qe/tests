package com.redhat.qe.ipa.sahi.tests.group;

import java.util.*;
import java.util.logging.Logger;
import org.testng.annotations.*; 

import com.redhat.qe.auto.testng.TestNGUtils;
import com.redhat.qe.ipa.sahi.base.SahiTestScript;
import com.redhat.qe.ipa.sahi.tasks.*;
import com.redhat.qe.auto.testng.*;

public class GroupTests extends SahiTestScript{
	
	private static Logger log = Logger.getLogger(GroupTests.class.getName());
	private static SahiTasks browser=null;
	
	@BeforeClass (groups={"init"}, description="Initialize app for this test suite run", alwaysRun=true, dependsOnGroups="setup")
	public void initialize() throws CloneNotSupportedException {
		browser=sahiTasks;
		browser.navigateTo(commonTasks.groupPage, true);
		browser.setStrictVisibilityCheck(true);
	}
	 
	@BeforeMethod (alwaysRun=true)
	public void checkURL(){
		String currentURL = browser.fetch("top.location.href");
		if (!currentURL.equals(commonTasks.groupPage)){
			log.info("current url=("+currentURL + "), is not a starting position, move to url=("+commonTasks.groupPage +")");
			browser.navigateTo(commonTasks.groupPage, true);
		}
	}
	
	@Test (groups={"addGroup"}, description="add group test", dataProvider="positiveData")
	public void addGroup_add(String testScenario, String groupName, String groupDescription, String isPosix){
		Assert.assertFalse(browser.link(groupName).exists(),"before 'Add', group does NOT exists");
		GroupTasks.add_UserGroup(browser, groupName, groupDescription, isPosix);
		Assert.assertTrue(browser.link(groupName).exists(),"after 'Add', group exists");
	}
	
	@Test (groups={"deleteGroup"}, description="delete group test", dataProvider="singleGroupData", dependsOnGroups="addGroup")
	public void deleteGroup_single(String testScenario, String groupName){
		Assert.assertTrue(browser.link(groupName).exists(),"before 'Delete', group should exists");
		GroupTasks.deleteGroup(browser, groupName);
		Assert.assertFalse(browser.link(groupName).exists(),"after 'Delete', group should disappear");
	}
	
	@Test (groups={"deleteGroup"}, description="delete group test", dataProvider="multipluGroupsData", dependsOnGroups="addGroup")
	public void deleteGroup_multiple(String testScenario, String groupNames){
		String[] groups = groupNames.split(" ");
		for (String groupName:groups){
			Assert.assertTrue(browser.link(groupName).exists(),"before 'Delete', group should exists");
		}
		GroupTasks.deleteGroup(browser, groups);
		for (String groupName:groups){			
			Assert.assertFalse(browser.link(groupName).exists(),"after 'Delete', group should disappear");
		}
	}
	
	/*******************************************************
	 *                DATA PROVIDERS                       *
	 *******************************************************/
	@DataProvider (name="positiveData")
	public Object[][] getUserGroup (){
		String[][] groups={  //scenario, user group name, description, posix or not info
							{"posix group",		"usergrp001_posix",		"test user group, #001, posix group",		"isPosix"},
							{"non posix group",	"usergrp002_nonposix",	"test user group, #002, non posix group",	"nonPosix"},
							{"default group",	"usergrp003_nonposix",	"test user group, #003, non posix group",	"default"}
						  };
		return groups;
	}
	
	@DataProvider (name="singleGroupData")
	public Object[][] getSingleGroup(){
		String[][] singleGroup = {{"single group", "usergrp001_posix"}};
		return singleGroup;
	}
	
	@DataProvider (name="multipluGroupsData")
	public Object[][] getMultipulGroups(){
		String[][] multipulGroups = {{"multipul groups", "usergrp002_nonposix usergrp003_nonposix"}};
		return multipulGroups;
	}
	
	@DataProvider(name="getGroupObjects")
	public Object[][] getGroupObjects() {
		return TestNGUtils.convertListOfListsTo2dArray(createGroupObjects());
	}
	protected List<List<Object>> createGroupObjects() {		
		List<List<Object>> ll = new ArrayList<List<Object>>();
		
        //	test name, groupName, groupDescription				
		ll.add(Arrays.asList(new Object[]{ "addgroup","sahi_auto_001","auto generated by sahi, group 001"} )); 
		        
		return ll;	
	}//createGroupObject
	
}//class GroupTest
