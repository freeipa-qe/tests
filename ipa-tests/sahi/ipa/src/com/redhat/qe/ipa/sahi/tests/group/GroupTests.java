package com.redhat.qe.ipa.sahi.tests.group;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import com.redhat.qe.auto.testng.TestNGUtils;
import com.redhat.qe.ipa.sahi.base.SahiTestScript;
import com.redhat.qe.ipa.sahi.tasks.SahiTasks;
import com.redhat.qe.ipa.sahi.tasks.GroupTasks;

public class GroupTests extends SahiTestScript{
	public static SahiTasks sahiTasks = null;	
	private String groupPage = "/ipa/ui/#identity=group&navigation=identity";
	
	@BeforeClass (groups={"init"}, description="Initialize app for this test suite run", alwaysRun=true, dependsOnGroups="setup")
	public void initialize() throws CloneNotSupportedException {	
		sahiTasks = SahiTestScript.getSahiTasks();	
		sahiTasks.navigateTo(System.getProperty("ipa.server.url")+groupPage, true);
	}
	
	/*
	 * Add groups - positive tests
	 */
	@Test (groups={"addGroupTests"}, dataProvider="getAddGroupObjects")	
	public void groupAcceptanceTest(String testname, String groupname, String description, String posix, String gidnumber, String button) throws Exception {
		//verify group doesn't exist
		com.redhat.qe.auto.testng.Assert.assertFalse(sahiTasks.link(groupname).exists(), "Verify user group " + groupname + " doesn't already exist");
		
		// add group test
		GroupTasks.addGroup(sahiTasks, groupname, description, posix, gidnumber, button);
		
		//verify the group exists
		if (testname == "addgroup_cancel"){
			com.redhat.qe.auto.testng.Assert.assertFalse(sahiTasks.link(groupname).exists(), "Verify user group " + groupname + " does NOT exist - action cancelled");
		}
		else {
			com.redhat.qe.auto.testng.Assert.assertTrue(sahiTasks.link(groupname).exists(), "Verify user group " + groupname + " was added successfully");
		}
	}
	
	/*
	 * Add groups - positive tests
	 */
	@Test (groups={"deleteGroupTests"}, dataProvider="getDeleteGroupObjects",   dependsOnGroups="addGroupTests")	
	public void groupAcceptanceTest(String testname, String groupname, String button) throws Exception {
		//verify group doesn't exist
		com.redhat.qe.auto.testng.Assert.assertTrue(sahiTasks.link(groupname).exists(), "Verify user group " + groupname + " exists");
		
		// add group test
		GroupTasks.deleteGroup(sahiTasks, groupname, button);
		
		//verify the group exists
		if (testname == "deletegroup_cancel"){
			com.redhat.qe.auto.testng.Assert.assertTrue(sahiTasks.link(groupname).exists(), "Verify user group " + groupname + " still exists - action cancelled");
		}
		else {
			com.redhat.qe.auto.testng.Assert.assertFalse(sahiTasks.link(groupname).exists(), "Verify user group " + groupname + " was deleted successfully");
		}
	}
	
	
	
	/*******************************************************
	 ************      DATA PROVIDERS     ***********
	 *******************************************************/

	/*
	 * Data to be used when adding user groups
	 */
	@DataProvider(name="getAddGroupObjects")
	public Object[][] getAddGroupObjects() {
		return TestNGUtils.convertListOfListsTo2dArray(createAddGroupObjects());
	}
	protected List<List<Object>> createAddGroupObjects() {		
		List<List<Object>> ll = new ArrayList<List<Object>>();
		
        //									testname 			groupname			description									posix	gidnumber		button
		ll.add(Arrays.asList(new Object[]{ "addgroup_cancel",	"sahi_auto_001",	"auto generated by sahi, group 001", 		"YES",	"",				"Cancel"	} )); 
		ll.add(Arrays.asList(new Object[]{ "addgroup_posix",	"myposixgroup",		"This is a posix group", 					"YES",	"",				"Add"		} ));   
		ll.add(Arrays.asList(new Object[]{ "addgroup_nonposix",	"mynonposixgroup",	"This is a non posix group", 				"NO",	"",				"Add"		} ));
		ll.add(Arrays.asList(new Object[]{ "addgroup_setgid",	"gidnumbergroup",	"group with gid number set", 				"YES",	"9999999",		"Add"		} ));
		return ll;	
	}
	
	/*
	 * Data to be used when deleting user groups
	 */
	@DataProvider(name="getDeleteGroupObjects")
	public Object[][] getDeleteGroupObjects() {
		return TestNGUtils.convertListOfListsTo2dArray(createDeleteGroupObjects());
	}
	protected List<List<Object>> createDeleteGroupObjects() {		
		List<List<Object>> ll = new ArrayList<List<Object>>();
		
        //									testname 				groupname				button
		ll.add(Arrays.asList(new Object[]{ "deletegroup_cancel",	"myposixgroup",			"Cancel"	} )); 
		ll.add(Arrays.asList(new Object[]{ "deletegroup_posix",		"myposixgroup",			"Delete"	} ));   
		ll.add(Arrays.asList(new Object[]{ "deletegroup_nonposix",	"mynonposixgroup",		"Delete"	} ));
		ll.add(Arrays.asList(new Object[]{ "deletegroup_setgid",	"gidnumbergroup",		"Delete"	} ));
		return ll;	
	}
	
}
