Introduction
------------
PyTET is a Python implementation of the TET API. The implementation has
been done using the interface compiler SWIG (http://www.swig.org).
PyTET was developed on a RedHat 9.0 Linux using TETware release 3.7, 
but there is no reason it shouldn't work on any POSIX conforming platform that 
supports Python and one of TET 3.3, TET3.6 or TETware 3.7.

Building
--------
It is assumed you have first installed and successfully built one of the
TET versions mentioned above. You should have an environment with TET_ROOT 
set and a PATH with $TET_ROOT/bin and the location to the python interpreter. 
You can edit and source in the provided pytet_profile. PYTHONPATH must contain
the directory where the PyTET shared library and pytet.py is installed.
You will need to edit the Makefile and check the settings for the target 
system. You can then run the make command to build the shared library 
and pytet.py files.

If you want to re-run SWIG you will need to have SWIG 1.3.21 or later
installed on the system. You can then compile using Makefile.swig after 
checking the contents.

Running the demo
----------------
A PyTET demo is supplied under pytet_demo. This contains a tet_scen with
three sample test sets; tc1, tc1 and tc3. Have a look at the contents
of each test set. This will give you an idea of how to make calls to
the TET API through Python. 

The main points to remember is to first import pytet. The python test
cases are then defined, eg test1, test2, test3 etc. Optionally there
can be a startup and cleanup function. The test list is then defined 
using a Python dictionary and then the calls are registered using the
pytet.pytet_init() function. If no startup or cleanup functions are
provided, then these are passed as TET_NULLFP.

Assuming the pytet_demo is installed under $TET_ROOT, then change to
the $TET_ROOT/pytet_demo directory and run the command:

	tcc -p -e

Otherwise set TET_SUITE_ROOT to where the pydemo directory is.

This will run the tests and put the journal in the results directory.
