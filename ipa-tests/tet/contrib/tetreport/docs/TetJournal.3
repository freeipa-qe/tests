.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH ../TetJournal 3 "A.01.00" "29/Oct/97" "HP TETWare"
.IX Title "../TetJournal 3"
.UC
.IX Name "TetJournal - Interpret TET Journal File"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
TetJournal \- Interpret TET Journal File
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class reads a supplied TET journal file and provides methods for
interpreting the journal to varying levels of detail.
.SH "METHODS"
.IX Header "METHODS"
.Ip "new    Create a TetJournal object." 0
.IX Item "new    Create a TetJournal object."
.PP
.Vb 2
\&  Input: Journal file name
\&  Returns: Object handle  (zero if error)
.Ve
.Ip "dump   Return array containing entire journal file" 0
.IX Item "dump   Return array containing entire journal file"
.PP
.Vb 2
\&  Input: none
\&  Returns: @journal array
.Ve
.Ip "status Return failure count within journal" 0
.IX Item "status Return failure count within journal"
.PP
.Vb 2
\&  Input: none
\&  Returns: Number of TPs that did not record a PASS result
.Ve
.Ip "nextBlock Fetch next logical block from journal" 0
.IX Item "nextBlock Fetch next logical block from journal"
.PP
.Vb 2
\&  Input: none
\&  Returns: @block array.  Unformatted contents of current block
.Ve
.Ip "resetBlockPtr  Reset block pointer to start of journal" 0
.IX Item "resetBlockPtr  Reset block pointer to start of journal"
.PP
.Vb 2
\&  Input: none
\&  Returns: empty
.Ve
.Ip "blockOutput" 0
.IX Item "blockOutput"
.PP
.Vb 2
\&  Input: none
\&  Returns: Output text contained in the current block
.Ve
.Ip "blockStatus" 0
.IX Item "blockStatus"
.PP
.Vb 2
\&  Input: none
\&  Returns: Failure count within current block (if block is a Test Case)
.Ve
.Ip "blockType" 0
.IX Item "blockType"
.PP
.Vb 3
\&  Input: none
\&  Returns: Text string identifying type of current block.  One of:
\&   "header","build","TC","clean","scenario" or "unknown"
.Ve
.Ip "blockTimes" 0
.IX Item "blockTimes"
.PP
.Vb 3
\&  Input: none
\&  Returns: 2 element array of start and end times for current block.  Times are
\&           in HH:MM:SS format
.Ve
.Ip "times" 0
.IX Item "times"
.PP
.Vb 2
\&  Input: none
\&  Returns: 2 element array of start and end times for entire journal
.Ve
.Ip "modes" 0
.IX Item "modes"
.PP
.Vb 3
\&  Input: none
\&  Returns: Array of tcc execution modes used.  (Selected from: 'build',
\&           'execute','clean')
.Ve
.Ip "TClist" 0
.IX Item "TClist"
.PP
.Vb 2
\&  Input: none
\&  Returns: List of Test Cases encountered in journal
.Ve
.Ip "TCname" 0
.IX Item "TCname"
.PP
.Vb 2
\&  Input: none
\&  Returns: Name of test case processed by current block
.Ve
.Ip "IClist" 0
.IX Item "IClist"
.PP
.Vb 8
\&  Input: Optional test case name.  If not specified, current block is used to
\&         determine test case (TC).
\&  Returns: 
\&   1. If test case is specified: 
\&      Array of all IC numbers processed by all invocations of specified test
\&      case
\&   2. If no test case specified:
\&      Array of IC numbers processed by current test case
.Ve
.Ip "getIC" 0
.IX Item "getIC"
.PP
.Vb 2
\&  Input: IC number within current test case.
\&  Returns: Array of journal entries for IC
.Ve
.Ip "ICpassCount" 0
.IX Item "ICpassCount"
.PP
.Vb 2
\&  Input: (Test Case, IC number)
\&  Returns: Array of total pass counts for each TP within specified IC
.Ve
.Ip "ICrunCount" 0
.IX Item "ICrunCount"
.PP
.Vb 2
\&  Input: (Test Case, IC number)
\&  Returns: Total number of times this IC has been run
.Ve
.Ip "ICstatus" 0
.IX Item "ICstatus"
.PP
.Vb 2
\&  Input: IC number within current test case
\&  Returns: Failure count for IC
.Ve
.Ip "ICtimes" 0
.IX Item "ICtimes"
.PP
.Vb 2
\&  Input: IC number within current test case
\&  Returns: Start and end times for specified IC
.Ve
.Ip "TPcount" 0
.IX Item "TPcount"
.PP
.Vb 2
\&  Input: IC number within current test case
\&  Returns: Number of Test Purposes for the specified IC
.Ve
.Ip "getTP" 0
.IX Item "getTP"
.PP
.Vb 2
\&  Input: (IC number, TP number)
\&  Returns: Unformated journal entries for specified Test Purpose
.Ve
.Ip "TPresult" 0
.IX Item "TPresult"
.PP
.Vb 2
\&  Input: (IC number, TP number)
\&  Returns: Result code (PASS, FAIL, NORESULT etc) for specified Test Purpose
.Ve
.Ip "TPoutput" 0
.IX Item "TPoutput"
.PP
.Vb 2
\&  Input: (IC number, TP number)
\&  Returns: Information text for a specified Test Purpose
.Ve
.Ip "TPtimes" 0
.IX Item "TPtimes"
.PP
.Vb 2
\&  Input: (IC number, TP number)
\&  Returns: Start and End times for specified Test Purpose
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Geoff Smith

.rn }` ''
